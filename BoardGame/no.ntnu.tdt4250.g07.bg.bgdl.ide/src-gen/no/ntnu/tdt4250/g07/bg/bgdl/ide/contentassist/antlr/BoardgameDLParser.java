/*
 * generated by Xtext 2.35.0
 */
package no.ntnu.tdt4250.g07.bg.bgdl.ide.contentassist.antlr;

import com.google.common.collect.ImmutableMap;
import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.Map;
import no.ntnu.tdt4250.g07.bg.bgdl.ide.contentassist.antlr.internal.InternalBoardgameDLParser;
import no.ntnu.tdt4250.g07.bg.bgdl.services.BoardgameDLGrammarAccess;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ide.editor.contentassist.antlr.AbstractContentAssistParser;

public class BoardgameDLParser extends AbstractContentAssistParser {

	@Singleton
	public static final class NameMappings {
		
		private final Map<AbstractElement, String> mappings;
		
		@Inject
		public NameMappings(BoardgameDLGrammarAccess grammarAccess) {
			ImmutableMap.Builder<AbstractElement, String> builder = ImmutableMap.builder();
			init(builder, grammarAccess);
			this.mappings = builder.build();
		}
		
		public String getRuleName(AbstractElement element) {
			return mappings.get(element);
		}
		
		private static void init(ImmutableMap.Builder<AbstractElement, String> builder, BoardgameDLGrammarAccess grammarAccess) {
			builder.put(grammarAccess.getEStringAccess().getAlternatives(), "rule__EString__Alternatives");
			builder.put(grammarAccess.getEBooleanAccess().getAlternatives(), "rule__EBoolean__Alternatives");
			builder.put(grammarAccess.getBoardGameAccess().getGroup(), "rule__BoardGame__Group__0");
			builder.put(grammarAccess.getPieceTypeAccess().getGroup(), "rule__PieceType__Group__0");
			builder.put(grammarAccess.getPieceTypeAccess().getGroup_8(), "rule__PieceType__Group_8__0");
			builder.put(grammarAccess.getPieceTypeAccess().getGroup_10(), "rule__PieceType__Group_10__0");
			builder.put(grammarAccess.getPieceTypeAccess().getGroup_10_3(), "rule__PieceType__Group_10_3__0");
			builder.put(grammarAccess.getCellStateAccess().getGroup(), "rule__CellState__Group__0");
			builder.put(grammarAccess.getWinConditionAccess().getGroup(), "rule__WinCondition__Group__0");
			builder.put(grammarAccess.getValidMoveAccess().getGroup(), "rule__ValidMove__Group__0");
			builder.put(grammarAccess.getValidMoveAccess().getGroup_3(), "rule__ValidMove__Group_3__0");
			builder.put(grammarAccess.getValidMoveAccess().getGroup_3_3(), "rule__ValidMove__Group_3_3__0");
			builder.put(grammarAccess.getEffectOnCellAccess().getGroup(), "rule__EffectOnCell__Group__0");
			builder.put(grammarAccess.getConditionAccess().getGroup(), "rule__Condition__Group__0");
			builder.put(grammarAccess.getConditionAccess().getGroup_3(), "rule__Condition__Group_3__0");
			builder.put(grammarAccess.getConditionAccess().getGroup_3_3(), "rule__Condition__Group_3_3__0");
			builder.put(grammarAccess.getEIntAccess().getGroup(), "rule__EInt__Group__0");
			builder.put(grammarAccess.getInARowAccess().getGroup(), "rule__InARow__Group__0");
			builder.put(grammarAccess.getBoardGameAccess().getPiecetypesAssignment_0(), "rule__BoardGame__PiecetypesAssignment_0");
			builder.put(grammarAccess.getBoardGameAccess().getCellstateAssignment_1(), "rule__BoardGame__CellstateAssignment_1");
			builder.put(grammarAccess.getBoardGameAccess().getWinconditionAssignment_2(), "rule__BoardGame__WinconditionAssignment_2");
			builder.put(grammarAccess.getBoardGameAccess().getSizeAssignment_4(), "rule__BoardGame__SizeAssignment_4");
			builder.put(grammarAccess.getPieceTypeAccess().getNameAssignment_1(), "rule__PieceType__NameAssignment_1");
			builder.put(grammarAccess.getPieceTypeAccess().getSymbolAssignment_4(), "rule__PieceType__SymbolAssignment_4");
			builder.put(grammarAccess.getPieceTypeAccess().getValidmoveAssignment_7(), "rule__PieceType__ValidmoveAssignment_7");
			builder.put(grammarAccess.getPieceTypeAccess().getValidmoveAssignment_8_1(), "rule__PieceType__ValidmoveAssignment_8_1");
			builder.put(grammarAccess.getPieceTypeAccess().getEffectoncellAssignment_10_2(), "rule__PieceType__EffectoncellAssignment_10_2");
			builder.put(grammarAccess.getPieceTypeAccess().getEffectoncellAssignment_10_3_1(), "rule__PieceType__EffectoncellAssignment_10_3_1");
			builder.put(grammarAccess.getWinConditionAccess().getInarowAssignment_3(), "rule__WinCondition__InarowAssignment_3");
			builder.put(grammarAccess.getValidMoveAccess().getPlaceAnywhereAssignment_0(), "rule__ValidMove__PlaceAnywhereAssignment_0");
			builder.put(grammarAccess.getValidMoveAccess().getConditionAssignment_3_2(), "rule__ValidMove__ConditionAssignment_3_2");
			builder.put(grammarAccess.getValidMoveAccess().getConditionAssignment_3_3_1(), "rule__ValidMove__ConditionAssignment_3_3_1");
			builder.put(grammarAccess.getEffectOnCellAccess().getXAssignment_3(), "rule__EffectOnCell__XAssignment_3");
			builder.put(grammarAccess.getEffectOnCellAccess().getYAssignment_5(), "rule__EffectOnCell__YAssignment_5");
			builder.put(grammarAccess.getEffectOnCellAccess().getCellstateAssignment_7(), "rule__EffectOnCell__CellstateAssignment_7");
			builder.put(grammarAccess.getConditionAccess().getCellstateAssignment_3_2(), "rule__Condition__CellstateAssignment_3_2");
			builder.put(grammarAccess.getConditionAccess().getCellstateAssignment_3_3_1(), "rule__Condition__CellstateAssignment_3_3_1");
			builder.put(grammarAccess.getInARowAccess().getDiagonalAssignment_0(), "rule__InARow__DiagonalAssignment_0");
			builder.put(grammarAccess.getInARowAccess().getHorizontalAssignment_1(), "rule__InARow__HorizontalAssignment_1");
			builder.put(grammarAccess.getInARowAccess().getVerticalAssignment_2(), "rule__InARow__VerticalAssignment_2");
			builder.put(grammarAccess.getInARowAccess().getCountAssignment_6(), "rule__InARow__CountAssignment_6");
		}
	}
	
	@Inject
	private NameMappings nameMappings;

	@Inject
	private BoardgameDLGrammarAccess grammarAccess;

	@Override
	protected InternalBoardgameDLParser createParser() {
		InternalBoardgameDLParser result = new InternalBoardgameDLParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}

	@Override
	protected String getRuleName(AbstractElement element) {
		return nameMappings.getRuleName(element);
	}

	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT" };
	}

	public BoardgameDLGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}

	public void setGrammarAccess(BoardgameDLGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
	
	public NameMappings getNameMappings() {
		return nameMappings;
	}
	
	public void setNameMappings(NameMappings nameMappings) {
		this.nameMappings = nameMappings;
	}
}
