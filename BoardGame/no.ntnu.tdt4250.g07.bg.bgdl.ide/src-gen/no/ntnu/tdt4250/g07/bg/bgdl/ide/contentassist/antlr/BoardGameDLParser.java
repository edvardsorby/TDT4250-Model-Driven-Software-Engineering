/*
 * generated by Xtext
 */
package no.ntnu.tdt4250.g07.bg.bgdl.ide.contentassist.antlr;

import com.google.common.collect.ImmutableMap;
import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.Map;
import no.ntnu.tdt4250.g07.bg.bgdl.ide.contentassist.antlr.internal.InternalBoardGameDLParser;
import no.ntnu.tdt4250.g07.bg.bgdl.services.BoardGameDLGrammarAccess;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ide.editor.contentassist.antlr.AbstractContentAssistParser;

public class BoardGameDLParser extends AbstractContentAssistParser {

	@Singleton
	public static final class NameMappings {
		
		private final Map<AbstractElement, String> mappings;
		
		@Inject
		public NameMappings(BoardGameDLGrammarAccess grammarAccess) {
			ImmutableMap.Builder<AbstractElement, String> builder = ImmutableMap.builder();
			init(builder, grammarAccess);
			this.mappings = builder.build();
		}
		
		public String getRuleName(AbstractElement element) {
			return mappings.get(element);
		}
		
		private static void init(ImmutableMap.Builder<AbstractElement, String> builder, BoardGameDLGrammarAccess grammarAccess) {
			builder.put(grammarAccess.getEStringAccess().getAlternatives(), "rule__EString__Alternatives");
			builder.put(grammarAccess.getEBooleanAccess().getAlternatives(), "rule__EBoolean__Alternatives");
			builder.put(grammarAccess.getBoardGameAccess().getGroup(), "rule__BoardGame__Group__0");
			builder.put(grammarAccess.getBoardGameAccess().getGroup_7(), "rule__BoardGame__Group_7__0");
			builder.put(grammarAccess.getBoardGameAccess().getGroup_9(), "rule__BoardGame__Group_9__0");
			builder.put(grammarAccess.getBoardGameAccess().getGroup_9_3(), "rule__BoardGame__Group_9_3__0");
			builder.put(grammarAccess.getBoardGameAccess().getGroup_10(), "rule__BoardGame__Group_10__0");
			builder.put(grammarAccess.getBoardGameAccess().getGroup_10_3(), "rule__BoardGame__Group_10_3__0");
			builder.put(grammarAccess.getBoardGameAccess().getGroup_14(), "rule__BoardGame__Group_14__0");
			builder.put(grammarAccess.getBoardGameAccess().getGroup_19(), "rule__BoardGame__Group_19__0");
			builder.put(grammarAccess.getPieceTypeAccess().getGroup(), "rule__PieceType__Group__0");
			builder.put(grammarAccess.getPieceTypeAccess().getGroup_9(), "rule__PieceType__Group_9__0");
			builder.put(grammarAccess.getPieceTypeAccess().getGroup_11(), "rule__PieceType__Group_11__0");
			builder.put(grammarAccess.getPieceTypeAccess().getGroup_11_3(), "rule__PieceType__Group_11_3__0");
			builder.put(grammarAccess.getWinConditionAccess().getGroup(), "rule__WinCondition__Group__0");
			builder.put(grammarAccess.getEIntAccess().getGroup(), "rule__EInt__Group__0");
			builder.put(grammarAccess.getValidMoveAccess().getGroup(), "rule__ValidMove__Group__0");
			builder.put(grammarAccess.getValidMoveAccess().getGroup_5(), "rule__ValidMove__Group_5__0");
			builder.put(grammarAccess.getValidMoveAccess().getGroup_5_2(), "rule__ValidMove__Group_5_2__0");
			builder.put(grammarAccess.getEffectOnCellAccess().getGroup(), "rule__EffectOnCell__Group__0");
			builder.put(grammarAccess.getConditionAccess().getGroup(), "rule__Condition__Group__0");
			builder.put(grammarAccess.getInARowAccess().getGroup(), "rule__InARow__Group__0");
			builder.put(grammarAccess.getBoardGameAccess().getNameAssignment_1(), "rule__BoardGame__NameAssignment_1");
			builder.put(grammarAccess.getBoardGameAccess().getSizeAssignment_3(), "rule__BoardGame__SizeAssignment_3");
			builder.put(grammarAccess.getBoardGameAccess().getValidmovesAssignment_6(), "rule__BoardGame__ValidmovesAssignment_6");
			builder.put(grammarAccess.getBoardGameAccess().getValidmovesAssignment_7_1(), "rule__BoardGame__ValidmovesAssignment_7_1");
			builder.put(grammarAccess.getBoardGameAccess().getCellstatesAssignment_9_2(), "rule__BoardGame__CellstatesAssignment_9_2");
			builder.put(grammarAccess.getBoardGameAccess().getCellstatesAssignment_9_3_1(), "rule__BoardGame__CellstatesAssignment_9_3_1");
			builder.put(grammarAccess.getBoardGameAccess().getEffectsoncellAssignment_10_2(), "rule__BoardGame__EffectsoncellAssignment_10_2");
			builder.put(grammarAccess.getBoardGameAccess().getEffectsoncellAssignment_10_3_1(), "rule__BoardGame__EffectsoncellAssignment_10_3_1");
			builder.put(grammarAccess.getBoardGameAccess().getWinConditionsAssignment_13(), "rule__BoardGame__WinConditionsAssignment_13");
			builder.put(grammarAccess.getBoardGameAccess().getWinConditionsAssignment_14_1(), "rule__BoardGame__WinConditionsAssignment_14_1");
			builder.put(grammarAccess.getBoardGameAccess().getPiecetypesAssignment_18(), "rule__BoardGame__PiecetypesAssignment_18");
			builder.put(grammarAccess.getBoardGameAccess().getPiecetypesAssignment_19_1(), "rule__BoardGame__PiecetypesAssignment_19_1");
			builder.put(grammarAccess.getPieceTypeAccess().getNameAssignment_2(), "rule__PieceType__NameAssignment_2");
			builder.put(grammarAccess.getPieceTypeAccess().getSymbolAssignment_5(), "rule__PieceType__SymbolAssignment_5");
			builder.put(grammarAccess.getPieceTypeAccess().getValidmovesAssignment_8(), "rule__PieceType__ValidmovesAssignment_8");
			builder.put(grammarAccess.getPieceTypeAccess().getValidmovesAssignment_9_1(), "rule__PieceType__ValidmovesAssignment_9_1");
			builder.put(grammarAccess.getPieceTypeAccess().getEffectsoncellAssignment_11_2(), "rule__PieceType__EffectsoncellAssignment_11_2");
			builder.put(grammarAccess.getPieceTypeAccess().getEffectsoncellAssignment_11_3_1(), "rule__PieceType__EffectsoncellAssignment_11_3_1");
			builder.put(grammarAccess.getCellStateAccess().getNameAssignment(), "rule__CellState__NameAssignment");
			builder.put(grammarAccess.getWinConditionAccess().getInarowAssignment_1(), "rule__WinCondition__InarowAssignment_1");
			builder.put(grammarAccess.getValidMoveAccess().getNameAssignment_2(), "rule__ValidMove__NameAssignment_2");
			builder.put(grammarAccess.getValidMoveAccess().getPlaceAnywhereAssignment_4(), "rule__ValidMove__PlaceAnywhereAssignment_4");
			builder.put(grammarAccess.getValidMoveAccess().getConditionsAssignment_5_1(), "rule__ValidMove__ConditionsAssignment_5_1");
			builder.put(grammarAccess.getValidMoveAccess().getConditionsAssignment_5_2_1(), "rule__ValidMove__ConditionsAssignment_5_2_1");
			builder.put(grammarAccess.getEffectOnCellAccess().getNameAssignment_2(), "rule__EffectOnCell__NameAssignment_2");
			builder.put(grammarAccess.getEffectOnCellAccess().getXAssignment_6(), "rule__EffectOnCell__XAssignment_6");
			builder.put(grammarAccess.getEffectOnCellAccess().getYAssignment_8(), "rule__EffectOnCell__YAssignment_8");
			builder.put(grammarAccess.getEffectOnCellAccess().getCellstateAssignment_12(), "rule__EffectOnCell__CellstateAssignment_12");
			builder.put(grammarAccess.getConditionAccess().getNameAssignment_1(), "rule__Condition__NameAssignment_1");
			builder.put(grammarAccess.getConditionAccess().getCellstateAssignment_4(), "rule__Condition__CellstateAssignment_4");
			builder.put(grammarAccess.getInARowAccess().getCountAssignment_1(), "rule__InARow__CountAssignment_1");
			builder.put(grammarAccess.getInARowAccess().getHorizontalAssignment_2(), "rule__InARow__HorizontalAssignment_2");
			builder.put(grammarAccess.getInARowAccess().getVerticalAssignment_3(), "rule__InARow__VerticalAssignment_3");
			builder.put(grammarAccess.getInARowAccess().getDiagonalAssignment_4(), "rule__InARow__DiagonalAssignment_4");
		}
	}
	
	@Inject
	private NameMappings nameMappings;

	@Inject
	private BoardGameDLGrammarAccess grammarAccess;

	@Override
	protected InternalBoardGameDLParser createParser() {
		InternalBoardGameDLParser result = new InternalBoardGameDLParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}

	@Override
	protected String getRuleName(AbstractElement element) {
		return nameMappings.getRuleName(element);
	}

	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT" };
	}

	public BoardGameDLGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}

	public void setGrammarAccess(BoardGameDLGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
	
	public NameMappings getNameMappings() {
		return nameMappings;
	}
	
	public void setNameMappings(NameMappings nameMappings) {
		this.nameMappings = nameMappings;
	}
}
