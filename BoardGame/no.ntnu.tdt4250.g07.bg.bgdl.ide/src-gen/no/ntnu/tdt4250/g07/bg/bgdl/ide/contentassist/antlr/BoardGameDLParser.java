/*
 * generated by Xtext
 */
package no.ntnu.tdt4250.g07.bg.bgdl.ide.contentassist.antlr;

import com.google.common.collect.ImmutableMap;
import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.Map;
import no.ntnu.tdt4250.g07.bg.bgdl.ide.contentassist.antlr.internal.InternalBoardGameDLParser;
import no.ntnu.tdt4250.g07.bg.bgdl.services.BoardGameDLGrammarAccess;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ide.editor.contentassist.antlr.AbstractContentAssistParser;

public class BoardGameDLParser extends AbstractContentAssistParser {

	@Singleton
	public static final class NameMappings {
		
		private final Map<AbstractElement, String> mappings;
		
		@Inject
		public NameMappings(BoardGameDLGrammarAccess grammarAccess) {
			ImmutableMap.Builder<AbstractElement, String> builder = ImmutableMap.builder();
			init(builder, grammarAccess);
			this.mappings = builder.build();
		}
		
		public String getRuleName(AbstractElement element) {
			return mappings.get(element);
		}
		
		private static void init(ImmutableMap.Builder<AbstractElement, String> builder, BoardGameDLGrammarAccess grammarAccess) {
			builder.put(grammarAccess.getBoardGameElementAccess().getAlternatives(), "rule__BoardGameElement__Alternatives");
			builder.put(grammarAccess.getEStringAccess().getAlternatives(), "rule__EString__Alternatives");
			builder.put(grammarAccess.getEBooleanAccess().getAlternatives(), "rule__EBoolean__Alternatives");
			builder.put(grammarAccess.getDirectionAccess().getAlternatives(), "rule__Direction__Alternatives");
			builder.put(grammarAccess.getBoardGameAccess().getGroup(), "rule__BoardGame__Group__0");
			builder.put(grammarAccess.getPieceTypeAccess().getGroup(), "rule__PieceType__Group__0");
			builder.put(grammarAccess.getPieceTypeAccess().getGroup_7(), "rule__PieceType__Group_7__0");
			builder.put(grammarAccess.getPieceTypeAccess().getGroup_8(), "rule__PieceType__Group_8__0");
			builder.put(grammarAccess.getPieceTypeAccess().getGroup_8_2(), "rule__PieceType__Group_8_2__0");
			builder.put(grammarAccess.getCellStateAccess().getGroup(), "rule__CellState__Group__0");
			builder.put(grammarAccess.getWinConditionAccess().getGroup(), "rule__WinCondition__Group__0");
			builder.put(grammarAccess.getEIntAccess().getGroup(), "rule__EInt__Group__0");
			builder.put(grammarAccess.getValidMoveAccess().getGroup(), "rule__ValidMove__Group__0");
			builder.put(grammarAccess.getValidMoveAccess().getGroup_4(), "rule__ValidMove__Group_4__0");
			builder.put(grammarAccess.getValidMoveAccess().getGroup_4_3(), "rule__ValidMove__Group_4_3__0");
			builder.put(grammarAccess.getEffectOnCellAccess().getGroup(), "rule__EffectOnCell__Group__0");
			builder.put(grammarAccess.getEffectOnCellAccess().getGroup_3_0(), "rule__EffectOnCell__Group_3_0__0");
			builder.put(grammarAccess.getEffectOnCellAccess().getGroup_3_1(), "rule__EffectOnCell__Group_3_1__0");
			builder.put(grammarAccess.getConditionAccess().getGroup(), "rule__Condition__Group__0");
			builder.put(grammarAccess.getLineAccess().getGroup(), "rule__Line__Group__0");
			builder.put(grammarAccess.getBoardGameAccess().getNameAssignment_1(), "rule__BoardGame__NameAssignment_1");
			builder.put(grammarAccess.getBoardGameAccess().getSizeAssignment_3(), "rule__BoardGame__SizeAssignment_3");
			builder.put(grammarAccess.getBoardGameAccess().getBoardGameElementsAssignment_4(), "rule__BoardGame__BoardGameElementsAssignment_4");
			builder.put(grammarAccess.getPieceTypeAccess().getNameAssignment_1(), "rule__PieceType__NameAssignment_1");
			builder.put(grammarAccess.getPieceTypeAccess().getSymbolAssignment_4(), "rule__PieceType__SymbolAssignment_4");
			builder.put(grammarAccess.getPieceTypeAccess().getValidMovesAssignment_6(), "rule__PieceType__ValidMovesAssignment_6");
			builder.put(grammarAccess.getPieceTypeAccess().getValidMovesAssignment_7_1(), "rule__PieceType__ValidMovesAssignment_7_1");
			builder.put(grammarAccess.getPieceTypeAccess().getEffectsoncellAssignment_8_1(), "rule__PieceType__EffectsoncellAssignment_8_1");
			builder.put(grammarAccess.getPieceTypeAccess().getEffectsoncellAssignment_8_2_1(), "rule__PieceType__EffectsoncellAssignment_8_2_1");
			builder.put(grammarAccess.getCellStateAccess().getNameAssignment_1(), "rule__CellState__NameAssignment_1");
			builder.put(grammarAccess.getWinConditionAccess().getWinConditionElementsAssignment_2(), "rule__WinCondition__WinConditionElementsAssignment_2");
			builder.put(grammarAccess.getWinConditionAccess().getWinConditionElementsAssignment_3(), "rule__WinCondition__WinConditionElementsAssignment_3");
			builder.put(grammarAccess.getValidMoveAccess().getNameAssignment_1(), "rule__ValidMove__NameAssignment_1");
			builder.put(grammarAccess.getValidMoveAccess().getPlaceAnywhereAssignment_3(), "rule__ValidMove__PlaceAnywhereAssignment_3");
			builder.put(grammarAccess.getValidMoveAccess().getConditionsAssignment_4_2(), "rule__ValidMove__ConditionsAssignment_4_2");
			builder.put(grammarAccess.getValidMoveAccess().getConditionsAssignment_4_3_1(), "rule__ValidMove__ConditionsAssignment_4_3_1");
			builder.put(grammarAccess.getEffectOnCellAccess().getNameAssignment_1(), "rule__EffectOnCell__NameAssignment_1");
			builder.put(grammarAccess.getEffectOnCellAccess().getXAssignment_3_0_2(), "rule__EffectOnCell__XAssignment_3_0_2");
			builder.put(grammarAccess.getEffectOnCellAccess().getYAssignment_3_0_4(), "rule__EffectOnCell__YAssignment_3_0_4");
			builder.put(grammarAccess.getEffectOnCellAccess().getCellStateAssignment_3_1_1(), "rule__EffectOnCell__CellStateAssignment_3_1_1");
			builder.put(grammarAccess.getConditionAccess().getNameAssignment_1(), "rule__Condition__NameAssignment_1");
			builder.put(grammarAccess.getConditionAccess().getCellStateAssignment_2(), "rule__Condition__CellStateAssignment_2");
			builder.put(grammarAccess.getLineAccess().getLengthAssignment_2(), "rule__Line__LengthAssignment_2");
			builder.put(grammarAccess.getLineAccess().getDirectionAssignment_4(), "rule__Line__DirectionAssignment_4");
			builder.put(grammarAccess.getEffectOnCellAccess().getUnorderedGroup_3(), "rule__EffectOnCell__UnorderedGroup_3");
		}
	}
	
	@Inject
	private NameMappings nameMappings;

	@Inject
	private BoardGameDLGrammarAccess grammarAccess;

	@Override
	protected InternalBoardGameDLParser createParser() {
		InternalBoardGameDLParser result = new InternalBoardGameDLParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}

	@Override
	protected String getRuleName(AbstractElement element) {
		return nameMappings.getRuleName(element);
	}

	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT" };
	}

	public BoardGameDLGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}

	public void setGrammarAccess(BoardGameDLGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
	
	public NameMappings getNameMappings() {
		return nameMappings;
	}
	
	public void setNameMappings(NameMappings nameMappings) {
		this.nameMappings = nameMappings;
	}
}
