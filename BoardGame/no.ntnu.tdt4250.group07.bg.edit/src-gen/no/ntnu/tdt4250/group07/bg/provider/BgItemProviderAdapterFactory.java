/**
 */
package no.ntnu.tdt4250.group07.bg.provider;

import java.util.ArrayList;
import java.util.Collection;

import no.ntnu.tdt4250.group07.bg.util.BgAdapterFactory;

import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.Notifier;

import org.eclipse.emf.edit.provider.ChangeNotifier;
import org.eclipse.emf.edit.provider.ComposeableAdapterFactory;
import org.eclipse.emf.edit.provider.ComposedAdapterFactory;
import org.eclipse.emf.edit.provider.IChangeNotifier;
import org.eclipse.emf.edit.provider.IDisposable;
import org.eclipse.emf.edit.provider.IEditingDomainItemProvider;
import org.eclipse.emf.edit.provider.IItemLabelProvider;
import org.eclipse.emf.edit.provider.IItemPropertySource;
import org.eclipse.emf.edit.provider.INotifyChangedListener;
import org.eclipse.emf.edit.provider.IStructuredItemContentProvider;
import org.eclipse.emf.edit.provider.ITreeItemContentProvider;

/**
 * This is the factory that is used to provide the interfaces needed to support Viewers.
 * The adapters generated by this factory convert EMF adapter notifications into calls to {@link #fireNotifyChanged fireNotifyChanged}.
 * The adapters also support Eclipse property sheets.
 * Note that most of the adapters are shared among multiple instances.
 * <!-- begin-user-doc -->
 * <!-- end-user-doc -->
 * @generated
 */
public class BgItemProviderAdapterFactory extends BgAdapterFactory
		implements ComposeableAdapterFactory, IChangeNotifier, IDisposable {
	/**
	 * This keeps track of the root adapter factory that delegates to this adapter factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ComposedAdapterFactory parentAdapterFactory;

	/**
	 * This is used to implement {@link org.eclipse.emf.edit.provider.IChangeNotifier}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected IChangeNotifier changeNotifier = new ChangeNotifier();

	/**
	 * This keeps track of all the supported types checked by {@link #isFactoryForType isFactoryForType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected Collection<Object> supportedTypes = new ArrayList<Object>();

	/**
	 * This constructs an instance.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public BgItemProviderAdapterFactory() {
		supportedTypes.add(IEditingDomainItemProvider.class);
		supportedTypes.add(IStructuredItemContentProvider.class);
		supportedTypes.add(ITreeItemContentProvider.class);
		supportedTypes.add(IItemLabelProvider.class);
		supportedTypes.add(IItemPropertySource.class);
	}

	/**
	 * This keeps track of the one adapter used for all {@link no.ntnu.tdt4250.group07.bg.Rules} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected RulesItemProvider rulesItemProvider;

	/**
	 * This creates an adapter for a {@link no.ntnu.tdt4250.group07.bg.Rules}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createRulesAdapter() {
		if (rulesItemProvider == null) {
			rulesItemProvider = new RulesItemProvider(this);
		}

		return rulesItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link no.ntnu.tdt4250.group07.bg.Board} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected BoardItemProvider boardItemProvider;

	/**
	 * This creates an adapter for a {@link no.ntnu.tdt4250.group07.bg.Board}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createBoardAdapter() {
		if (boardItemProvider == null) {
			boardItemProvider = new BoardItemProvider(this);
		}

		return boardItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link no.ntnu.tdt4250.group07.bg.PlayerBrickSet} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected PlayerBrickSetItemProvider playerBrickSetItemProvider;

	/**
	 * This creates an adapter for a {@link no.ntnu.tdt4250.group07.bg.PlayerBrickSet}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createPlayerBrickSetAdapter() {
		if (playerBrickSetItemProvider == null) {
			playerBrickSetItemProvider = new PlayerBrickSetItemProvider(this);
		}

		return playerBrickSetItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link no.ntnu.tdt4250.group07.bg.Brick} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected BrickItemProvider brickItemProvider;

	/**
	 * This creates an adapter for a {@link no.ntnu.tdt4250.group07.bg.Brick}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createBrickAdapter() {
		if (brickItemProvider == null) {
			brickItemProvider = new BrickItemProvider(this);
		}

		return brickItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link no.ntnu.tdt4250.group07.bg.BrickType} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected BrickTypeItemProvider brickTypeItemProvider;

	/**
	 * This creates an adapter for a {@link no.ntnu.tdt4250.group07.bg.BrickType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createBrickTypeAdapter() {
		if (brickTypeItemProvider == null) {
			brickTypeItemProvider = new BrickTypeItemProvider(this);
		}

		return brickTypeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link no.ntnu.tdt4250.group07.bg.BrickState} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected BrickStateItemProvider brickStateItemProvider;

	/**
	 * This creates an adapter for a {@link no.ntnu.tdt4250.group07.bg.BrickState}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createBrickStateAdapter() {
		if (brickStateItemProvider == null) {
			brickStateItemProvider = new BrickStateItemProvider(this);
		}

		return brickStateItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link no.ntnu.tdt4250.group07.bg.Cell} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected CellItemProvider cellItemProvider;

	/**
	 * This creates an adapter for a {@link no.ntnu.tdt4250.group07.bg.Cell}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createCellAdapter() {
		if (cellItemProvider == null) {
			cellItemProvider = new CellItemProvider(this);
		}

		return cellItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link no.ntnu.tdt4250.group07.bg.CellType} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected CellTypeItemProvider cellTypeItemProvider;

	/**
	 * This creates an adapter for a {@link no.ntnu.tdt4250.group07.bg.CellType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createCellTypeAdapter() {
		if (cellTypeItemProvider == null) {
			cellTypeItemProvider = new CellTypeItemProvider(this);
		}

		return cellTypeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link no.ntnu.tdt4250.group07.bg.CellState} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected CellStateItemProvider cellStateItemProvider;

	/**
	 * This creates an adapter for a {@link no.ntnu.tdt4250.group07.bg.CellState}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createCellStateAdapter() {
		if (cellStateItemProvider == null) {
			cellStateItemProvider = new CellStateItemProvider(this);
		}

		return cellStateItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link no.ntnu.tdt4250.group07.bg.BoardState} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected BoardStateItemProvider boardStateItemProvider;

	/**
	 * This creates an adapter for a {@link no.ntnu.tdt4250.group07.bg.BoardState}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createBoardStateAdapter() {
		if (boardStateItemProvider == null) {
			boardStateItemProvider = new BoardStateItemProvider(this);
		}

		return boardStateItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link no.ntnu.tdt4250.group07.bg.ValidMove} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ValidMoveItemProvider validMoveItemProvider;

	/**
	 * This creates an adapter for a {@link no.ntnu.tdt4250.group07.bg.ValidMove}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createValidMoveAdapter() {
		if (validMoveItemProvider == null) {
			validMoveItemProvider = new ValidMoveItemProvider(this);
		}

		return validMoveItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link no.ntnu.tdt4250.group07.bg.Condition} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ConditionItemProvider conditionItemProvider;

	/**
	 * This creates an adapter for a {@link no.ntnu.tdt4250.group07.bg.Condition}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createConditionAdapter() {
		if (conditionItemProvider == null) {
			conditionItemProvider = new ConditionItemProvider(this);
		}

		return conditionItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link no.ntnu.tdt4250.group07.bg.BrickChange} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected BrickChangeItemProvider brickChangeItemProvider;

	/**
	 * This creates an adapter for a {@link no.ntnu.tdt4250.group07.bg.BrickChange}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createBrickChangeAdapter() {
		if (brickChangeItemProvider == null) {
			brickChangeItemProvider = new BrickChangeItemProvider(this);
		}

		return brickChangeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link no.ntnu.tdt4250.group07.bg.RelativePosition} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected RelativePositionItemProvider relativePositionItemProvider;

	/**
	 * This creates an adapter for a {@link no.ntnu.tdt4250.group07.bg.RelativePosition}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createRelativePositionAdapter() {
		if (relativePositionItemProvider == null) {
			relativePositionItemProvider = new RelativePositionItemProvider(this);
		}

		return relativePositionItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link no.ntnu.tdt4250.group07.bg.CellChange} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected CellChangeItemProvider cellChangeItemProvider;

	/**
	 * This creates an adapter for a {@link no.ntnu.tdt4250.group07.bg.CellChange}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createCellChangeAdapter() {
		if (cellChangeItemProvider == null) {
			cellChangeItemProvider = new CellChangeItemProvider(this);
		}

		return cellChangeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link no.ntnu.tdt4250.group07.bg.EffectOnCell} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected EffectOnCellItemProvider effectOnCellItemProvider;

	/**
	 * This creates an adapter for a {@link no.ntnu.tdt4250.group07.bg.EffectOnCell}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createEffectOnCellAdapter() {
		if (effectOnCellItemProvider == null) {
			effectOnCellItemProvider = new EffectOnCellItemProvider(this);
		}

		return effectOnCellItemProvider;
	}

	/**
	 * This returns the root adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public ComposeableAdapterFactory getRootAdapterFactory() {
		return parentAdapterFactory == null ? this : parentAdapterFactory.getRootAdapterFactory();
	}

	/**
	 * This sets the composed adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public void setParentAdapterFactory(ComposedAdapterFactory parentAdapterFactory) {
		this.parentAdapterFactory = parentAdapterFactory;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public boolean isFactoryForType(Object type) {
		return supportedTypes.contains(type) || super.isFactoryForType(type);
	}

	/**
	 * This implementation substitutes the factory itself as the key for the adapter.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter adapt(Notifier notifier, Object type) {
		return super.adapt(notifier, this);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Object adapt(Object object, Object type) {
		if (isFactoryForType(type)) {
			Object adapter = super.adapt(object, type);
			if (!(type instanceof Class<?>) || (((Class<?>) type).isInstance(adapter))) {
				return adapter;
			}
		}

		return null;
	}

	/**
	 * This adds a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public void addListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.addListener(notifyChangedListener);
	}

	/**
	 * This removes a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public void removeListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.removeListener(notifyChangedListener);
	}

	/**
	 * This delegates to {@link #changeNotifier} and to {@link #parentAdapterFactory}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public void fireNotifyChanged(Notification notification) {
		changeNotifier.fireNotifyChanged(notification);

		if (parentAdapterFactory != null) {
			parentAdapterFactory.fireNotifyChanged(notification);
		}
	}

	/**
	 * This disposes all of the item providers created by this factory. 
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public void dispose() {
		if (rulesItemProvider != null)
			rulesItemProvider.dispose();
		if (boardItemProvider != null)
			boardItemProvider.dispose();
		if (playerBrickSetItemProvider != null)
			playerBrickSetItemProvider.dispose();
		if (brickItemProvider != null)
			brickItemProvider.dispose();
		if (brickTypeItemProvider != null)
			brickTypeItemProvider.dispose();
		if (brickStateItemProvider != null)
			brickStateItemProvider.dispose();
		if (cellItemProvider != null)
			cellItemProvider.dispose();
		if (cellTypeItemProvider != null)
			cellTypeItemProvider.dispose();
		if (cellStateItemProvider != null)
			cellStateItemProvider.dispose();
		if (boardStateItemProvider != null)
			boardStateItemProvider.dispose();
		if (validMoveItemProvider != null)
			validMoveItemProvider.dispose();
		if (conditionItemProvider != null)
			conditionItemProvider.dispose();
		if (brickChangeItemProvider != null)
			brickChangeItemProvider.dispose();
		if (relativePositionItemProvider != null)
			relativePositionItemProvider.dispose();
		if (cellChangeItemProvider != null)
			cellChangeItemProvider.dispose();
		if (effectOnCellItemProvider != null)
			effectOnCellItemProvider.dispose();
	}

}
