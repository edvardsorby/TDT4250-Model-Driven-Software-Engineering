/*
 * generated by Xtext 2.35.0
 */
package no.ntnu.tdt4250.g07.bg.bgdl.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.CrossReference;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class BoardgameDLGrammarAccess extends AbstractElementFinder.AbstractGrammarElementFinder {
	
	public class BoardGameElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "no.ntnu.tdt4250.g07.bg.bgdl.BoardgameDL.BoardGame");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cPiecetypesAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cPiecetypesPieceTypeParserRuleCall_0_0 = (RuleCall)cPiecetypesAssignment_0.eContents().get(0);
		private final Assignment cCellstateAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cCellstateCellStateParserRuleCall_1_0 = (RuleCall)cCellstateAssignment_1.eContents().get(0);
		private final Assignment cWinconditionAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cWinconditionWinConditionParserRuleCall_2_0 = (RuleCall)cWinconditionAssignment_2.eContents().get(0);
		private final Keyword cSizeKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cSizeAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cSizeEIntParserRuleCall_4_0 = (RuleCall)cSizeAssignment_4.eContents().get(0);
		
		//BoardGame returns BoardGame:
		//    piecetypes+=PieceType*
		//    cellstate+=CellState*
		//    wincondition+=WinCondition*
		//    'Size' size=EInt;
		@Override public ParserRule getRule() { return rule; }
		
		//piecetypes+=PieceType*
		//cellstate+=CellState*
		//wincondition+=WinCondition*
		//'Size' size=EInt
		public Group getGroup() { return cGroup; }
		
		//piecetypes+=PieceType*
		public Assignment getPiecetypesAssignment_0() { return cPiecetypesAssignment_0; }
		
		//PieceType
		public RuleCall getPiecetypesPieceTypeParserRuleCall_0_0() { return cPiecetypesPieceTypeParserRuleCall_0_0; }
		
		//cellstate+=CellState*
		public Assignment getCellstateAssignment_1() { return cCellstateAssignment_1; }
		
		//CellState
		public RuleCall getCellstateCellStateParserRuleCall_1_0() { return cCellstateCellStateParserRuleCall_1_0; }
		
		//wincondition+=WinCondition*
		public Assignment getWinconditionAssignment_2() { return cWinconditionAssignment_2; }
		
		//WinCondition
		public RuleCall getWinconditionWinConditionParserRuleCall_2_0() { return cWinconditionWinConditionParserRuleCall_2_0; }
		
		//'Size'
		public Keyword getSizeKeyword_3() { return cSizeKeyword_3; }
		
		//size=EInt
		public Assignment getSizeAssignment_4() { return cSizeAssignment_4; }
		
		//EInt
		public RuleCall getSizeEIntParserRuleCall_4_0() { return cSizeEIntParserRuleCall_4_0; }
	}
	public class EStringElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "no.ntnu.tdt4250.g07.bg.bgdl.BoardgameDL.EString");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cSTRINGTerminalRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cIDTerminalRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//EString returns ecore::EString:
		//    STRING | ID;
		@Override public ParserRule getRule() { return rule; }
		
		//STRING | ID
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//STRING
		public RuleCall getSTRINGTerminalRuleCall_0() { return cSTRINGTerminalRuleCall_0; }
		
		//ID
		public RuleCall getIDTerminalRuleCall_1() { return cIDTerminalRuleCall_1; }
	}
	public class PieceTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "no.ntnu.tdt4250.g07.bg.bgdl.BoardgameDL.PieceType");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cPieceTypeKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameEStringParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cSymbolKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cSymbolAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cSymbolEStringParserRuleCall_4_0 = (RuleCall)cSymbolAssignment_4.eContents().get(0);
		private final Keyword cValidmoveKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Keyword cLeftCurlyBracketKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Assignment cValidmoveAssignment_7 = (Assignment)cGroup.eContents().get(7);
		private final RuleCall cValidmoveValidMoveParserRuleCall_7_0 = (RuleCall)cValidmoveAssignment_7.eContents().get(0);
		private final Group cGroup_8 = (Group)cGroup.eContents().get(8);
		private final Keyword cCommaKeyword_8_0 = (Keyword)cGroup_8.eContents().get(0);
		private final Assignment cValidmoveAssignment_8_1 = (Assignment)cGroup_8.eContents().get(1);
		private final RuleCall cValidmoveValidMoveParserRuleCall_8_1_0 = (RuleCall)cValidmoveAssignment_8_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_9 = (Keyword)cGroup.eContents().get(9);
		private final Group cGroup_10 = (Group)cGroup.eContents().get(10);
		private final Keyword cEffectoncellKeyword_10_0 = (Keyword)cGroup_10.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_10_1 = (Keyword)cGroup_10.eContents().get(1);
		private final Assignment cEffectoncellAssignment_10_2 = (Assignment)cGroup_10.eContents().get(2);
		private final RuleCall cEffectoncellEffectOnCellParserRuleCall_10_2_0 = (RuleCall)cEffectoncellAssignment_10_2.eContents().get(0);
		private final Group cGroup_10_3 = (Group)cGroup_10.eContents().get(3);
		private final Keyword cCommaKeyword_10_3_0 = (Keyword)cGroup_10_3.eContents().get(0);
		private final Assignment cEffectoncellAssignment_10_3_1 = (Assignment)cGroup_10_3.eContents().get(1);
		private final RuleCall cEffectoncellEffectOnCellParserRuleCall_10_3_1_0 = (RuleCall)cEffectoncellAssignment_10_3_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_10_4 = (Keyword)cGroup_10.eContents().get(4);
		private final Keyword cRightCurlyBracketKeyword_11 = (Keyword)cGroup.eContents().get(11);
		
		//PieceType returns PieceType:
		//    'PieceType'
		//    name=EString
		//    '{'
		//        'symbol' symbol=EString
		//        'validmove' '{' validmove+=ValidMove ( "," validmove+=ValidMove)* '}'
		//        ('effectoncell' '{' effectoncell+=EffectOnCell ( "," effectoncell+=EffectOnCell)* '}' )?
		//    '}';
		@Override public ParserRule getRule() { return rule; }
		
		//'PieceType'
		//name=EString
		//'{'
		//    'symbol' symbol=EString
		//    'validmove' '{' validmove+=ValidMove ( "," validmove+=ValidMove)* '}'
		//    ('effectoncell' '{' effectoncell+=EffectOnCell ( "," effectoncell+=EffectOnCell)* '}' )?
		//'}'
		public Group getGroup() { return cGroup; }
		
		//'PieceType'
		public Keyword getPieceTypeKeyword_0() { return cPieceTypeKeyword_0; }
		
		//name=EString
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//EString
		public RuleCall getNameEStringParserRuleCall_1_0() { return cNameEStringParserRuleCall_1_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }
		
		//'symbol'
		public Keyword getSymbolKeyword_3() { return cSymbolKeyword_3; }
		
		//symbol=EString
		public Assignment getSymbolAssignment_4() { return cSymbolAssignment_4; }
		
		//EString
		public RuleCall getSymbolEStringParserRuleCall_4_0() { return cSymbolEStringParserRuleCall_4_0; }
		
		//'validmove'
		public Keyword getValidmoveKeyword_5() { return cValidmoveKeyword_5; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_6() { return cLeftCurlyBracketKeyword_6; }
		
		//validmove+=ValidMove
		public Assignment getValidmoveAssignment_7() { return cValidmoveAssignment_7; }
		
		//ValidMove
		public RuleCall getValidmoveValidMoveParserRuleCall_7_0() { return cValidmoveValidMoveParserRuleCall_7_0; }
		
		//( "," validmove+=ValidMove)*
		public Group getGroup_8() { return cGroup_8; }
		
		//","
		public Keyword getCommaKeyword_8_0() { return cCommaKeyword_8_0; }
		
		//validmove+=ValidMove
		public Assignment getValidmoveAssignment_8_1() { return cValidmoveAssignment_8_1; }
		
		//ValidMove
		public RuleCall getValidmoveValidMoveParserRuleCall_8_1_0() { return cValidmoveValidMoveParserRuleCall_8_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_9() { return cRightCurlyBracketKeyword_9; }
		
		//('effectoncell' '{' effectoncell+=EffectOnCell ( "," effectoncell+=EffectOnCell)* '}' )?
		public Group getGroup_10() { return cGroup_10; }
		
		//'effectoncell'
		public Keyword getEffectoncellKeyword_10_0() { return cEffectoncellKeyword_10_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_10_1() { return cLeftCurlyBracketKeyword_10_1; }
		
		//effectoncell+=EffectOnCell
		public Assignment getEffectoncellAssignment_10_2() { return cEffectoncellAssignment_10_2; }
		
		//EffectOnCell
		public RuleCall getEffectoncellEffectOnCellParserRuleCall_10_2_0() { return cEffectoncellEffectOnCellParserRuleCall_10_2_0; }
		
		//( "," effectoncell+=EffectOnCell)*
		public Group getGroup_10_3() { return cGroup_10_3; }
		
		//","
		public Keyword getCommaKeyword_10_3_0() { return cCommaKeyword_10_3_0; }
		
		//effectoncell+=EffectOnCell
		public Assignment getEffectoncellAssignment_10_3_1() { return cEffectoncellAssignment_10_3_1; }
		
		//EffectOnCell
		public RuleCall getEffectoncellEffectOnCellParserRuleCall_10_3_1_0() { return cEffectoncellEffectOnCellParserRuleCall_10_3_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_10_4() { return cRightCurlyBracketKeyword_10_4; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_11() { return cRightCurlyBracketKeyword_11; }
	}
	public class CellStateElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "no.ntnu.tdt4250.g07.bg.bgdl.BoardgameDL.CellState");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cCellStateAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cCellStateKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//CellState returns CellState:
		//    {CellState}
		//    'CellState'
		//    ;
		@Override public ParserRule getRule() { return rule; }
		
		//{CellState}
		//'CellState'
		public Group getGroup() { return cGroup; }
		
		//{CellState}
		public Action getCellStateAction_0() { return cCellStateAction_0; }
		
		//'CellState'
		public Keyword getCellStateKeyword_1() { return cCellStateKeyword_1; }
	}
	public class WinConditionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "no.ntnu.tdt4250.g07.bg.bgdl.BoardgameDL.WinCondition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cWinConditionKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cInarowKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cInarowAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cInarowInARowParserRuleCall_3_0 = (RuleCall)cInarowAssignment_3.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//WinCondition returns WinCondition:
		//    'WinCondition'
		//    '{'
		//        'inarow' inarow=InARow
		//    '}';
		@Override public ParserRule getRule() { return rule; }
		
		//'WinCondition'
		//'{'
		//    'inarow' inarow=InARow
		//'}'
		public Group getGroup() { return cGroup; }
		
		//'WinCondition'
		public Keyword getWinConditionKeyword_0() { return cWinConditionKeyword_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }
		
		//'inarow'
		public Keyword getInarowKeyword_2() { return cInarowKeyword_2; }
		
		//inarow=InARow
		public Assignment getInarowAssignment_3() { return cInarowAssignment_3; }
		
		//InARow
		public RuleCall getInarowInARowParserRuleCall_3_0() { return cInarowInARowParserRuleCall_3_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
	}
	public class ValidMoveElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "no.ntnu.tdt4250.g07.bg.bgdl.BoardgameDL.ValidMove");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cPlaceAnywhereAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cPlaceAnywherePlaceAnywhereKeyword_0_0 = (Keyword)cPlaceAnywhereAssignment_0.eContents().get(0);
		private final Keyword cValidMoveKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cConditionKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_3_1 = (Keyword)cGroup_3.eContents().get(1);
		private final Assignment cConditionAssignment_3_2 = (Assignment)cGroup_3.eContents().get(2);
		private final RuleCall cConditionConditionParserRuleCall_3_2_0 = (RuleCall)cConditionAssignment_3_2.eContents().get(0);
		private final Group cGroup_3_3 = (Group)cGroup_3.eContents().get(3);
		private final Keyword cCommaKeyword_3_3_0 = (Keyword)cGroup_3_3.eContents().get(0);
		private final Assignment cConditionAssignment_3_3_1 = (Assignment)cGroup_3_3.eContents().get(1);
		private final RuleCall cConditionConditionParserRuleCall_3_3_1_0 = (RuleCall)cConditionAssignment_3_3_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_3_4 = (Keyword)cGroup_3.eContents().get(4);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//ValidMove returns ValidMove:
		//    placeAnywhere?='placeAnywhere'
		//    'ValidMove'
		//    '{'
		//        ('condition' '{' condition+=Condition ( "," condition+=Condition)* '}' )?
		//    '}';
		@Override public ParserRule getRule() { return rule; }
		
		//placeAnywhere?='placeAnywhere'
		//'ValidMove'
		//'{'
		//    ('condition' '{' condition+=Condition ( "," condition+=Condition)* '}' )?
		//'}'
		public Group getGroup() { return cGroup; }
		
		//placeAnywhere?='placeAnywhere'
		public Assignment getPlaceAnywhereAssignment_0() { return cPlaceAnywhereAssignment_0; }
		
		//'placeAnywhere'
		public Keyword getPlaceAnywherePlaceAnywhereKeyword_0_0() { return cPlaceAnywherePlaceAnywhereKeyword_0_0; }
		
		//'ValidMove'
		public Keyword getValidMoveKeyword_1() { return cValidMoveKeyword_1; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }
		
		//('condition' '{' condition+=Condition ( "," condition+=Condition)* '}' )?
		public Group getGroup_3() { return cGroup_3; }
		
		//'condition'
		public Keyword getConditionKeyword_3_0() { return cConditionKeyword_3_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_3_1() { return cLeftCurlyBracketKeyword_3_1; }
		
		//condition+=Condition
		public Assignment getConditionAssignment_3_2() { return cConditionAssignment_3_2; }
		
		//Condition
		public RuleCall getConditionConditionParserRuleCall_3_2_0() { return cConditionConditionParserRuleCall_3_2_0; }
		
		//( "," condition+=Condition)*
		public Group getGroup_3_3() { return cGroup_3_3; }
		
		//","
		public Keyword getCommaKeyword_3_3_0() { return cCommaKeyword_3_3_0; }
		
		//condition+=Condition
		public Assignment getConditionAssignment_3_3_1() { return cConditionAssignment_3_3_1; }
		
		//Condition
		public RuleCall getConditionConditionParserRuleCall_3_3_1_0() { return cConditionConditionParserRuleCall_3_3_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_3_4() { return cRightCurlyBracketKeyword_3_4; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
	}
	public class EffectOnCellElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "no.ntnu.tdt4250.g07.bg.bgdl.BoardgameDL.EffectOnCell");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cEffectOnCellKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cXKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cXAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cXEIntParserRuleCall_3_0 = (RuleCall)cXAssignment_3.eContents().get(0);
		private final Keyword cYKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cYAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cYEIntParserRuleCall_5_0 = (RuleCall)cYAssignment_5.eContents().get(0);
		private final Keyword cCellstateKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Assignment cCellstateAssignment_7 = (Assignment)cGroup.eContents().get(7);
		private final CrossReference cCellstateCellStateCrossReference_7_0 = (CrossReference)cCellstateAssignment_7.eContents().get(0);
		private final RuleCall cCellstateCellStateEStringParserRuleCall_7_0_1 = (RuleCall)cCellstateCellStateCrossReference_7_0.eContents().get(1);
		private final Keyword cRightCurlyBracketKeyword_8 = (Keyword)cGroup.eContents().get(8);
		
		//EffectOnCell returns EffectOnCell:
		//    'EffectOnCell'
		//    '{'
		//        'x' x=EInt
		//        'y' y=EInt
		//        'cellstate' cellstate=[CellState|EString]
		//    '}';
		@Override public ParserRule getRule() { return rule; }
		
		//'EffectOnCell'
		//'{'
		//    'x' x=EInt
		//    'y' y=EInt
		//    'cellstate' cellstate=[CellState|EString]
		//'}'
		public Group getGroup() { return cGroup; }
		
		//'EffectOnCell'
		public Keyword getEffectOnCellKeyword_0() { return cEffectOnCellKeyword_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }
		
		//'x'
		public Keyword getXKeyword_2() { return cXKeyword_2; }
		
		//x=EInt
		public Assignment getXAssignment_3() { return cXAssignment_3; }
		
		//EInt
		public RuleCall getXEIntParserRuleCall_3_0() { return cXEIntParserRuleCall_3_0; }
		
		//'y'
		public Keyword getYKeyword_4() { return cYKeyword_4; }
		
		//y=EInt
		public Assignment getYAssignment_5() { return cYAssignment_5; }
		
		//EInt
		public RuleCall getYEIntParserRuleCall_5_0() { return cYEIntParserRuleCall_5_0; }
		
		//'cellstate'
		public Keyword getCellstateKeyword_6() { return cCellstateKeyword_6; }
		
		//cellstate=[CellState|EString]
		public Assignment getCellstateAssignment_7() { return cCellstateAssignment_7; }
		
		//[CellState|EString]
		public CrossReference getCellstateCellStateCrossReference_7_0() { return cCellstateCellStateCrossReference_7_0; }
		
		//EString
		public RuleCall getCellstateCellStateEStringParserRuleCall_7_0_1() { return cCellstateCellStateEStringParserRuleCall_7_0_1; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_8() { return cRightCurlyBracketKeyword_8; }
	}
	public class ConditionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "no.ntnu.tdt4250.g07.bg.bgdl.BoardgameDL.Condition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cConditionAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cConditionKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cCellstateKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_3_1 = (Keyword)cGroup_3.eContents().get(1);
		private final Assignment cCellstateAssignment_3_2 = (Assignment)cGroup_3.eContents().get(2);
		private final CrossReference cCellstateCellStateCrossReference_3_2_0 = (CrossReference)cCellstateAssignment_3_2.eContents().get(0);
		private final RuleCall cCellstateCellStateEStringParserRuleCall_3_2_0_1 = (RuleCall)cCellstateCellStateCrossReference_3_2_0.eContents().get(1);
		private final Group cGroup_3_3 = (Group)cGroup_3.eContents().get(3);
		private final Keyword cCommaKeyword_3_3_0 = (Keyword)cGroup_3_3.eContents().get(0);
		private final Assignment cCellstateAssignment_3_3_1 = (Assignment)cGroup_3_3.eContents().get(1);
		private final CrossReference cCellstateCellStateCrossReference_3_3_1_0 = (CrossReference)cCellstateAssignment_3_3_1.eContents().get(0);
		private final RuleCall cCellstateCellStateEStringParserRuleCall_3_3_1_0_1 = (RuleCall)cCellstateCellStateCrossReference_3_3_1_0.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_3_4 = (Keyword)cGroup_3.eContents().get(4);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//Condition returns Condition:
		//    {Condition}
		//    'Condition'
		//    '{'
		//        ('cellstate' '(' cellstate+=[CellState|EString] ( "," cellstate+=[CellState|EString])* ')' )?
		//    '}';
		@Override public ParserRule getRule() { return rule; }
		
		//{Condition}
		//'Condition'
		//'{'
		//    ('cellstate' '(' cellstate+=[CellState|EString] ( "," cellstate+=[CellState|EString])* ')' )?
		//'}'
		public Group getGroup() { return cGroup; }
		
		//{Condition}
		public Action getConditionAction_0() { return cConditionAction_0; }
		
		//'Condition'
		public Keyword getConditionKeyword_1() { return cConditionKeyword_1; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }
		
		//('cellstate' '(' cellstate+=[CellState|EString] ( "," cellstate+=[CellState|EString])* ')' )?
		public Group getGroup_3() { return cGroup_3; }
		
		//'cellstate'
		public Keyword getCellstateKeyword_3_0() { return cCellstateKeyword_3_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_3_1() { return cLeftParenthesisKeyword_3_1; }
		
		//cellstate+=[CellState|EString]
		public Assignment getCellstateAssignment_3_2() { return cCellstateAssignment_3_2; }
		
		//[CellState|EString]
		public CrossReference getCellstateCellStateCrossReference_3_2_0() { return cCellstateCellStateCrossReference_3_2_0; }
		
		//EString
		public RuleCall getCellstateCellStateEStringParserRuleCall_3_2_0_1() { return cCellstateCellStateEStringParserRuleCall_3_2_0_1; }
		
		//( "," cellstate+=[CellState|EString])*
		public Group getGroup_3_3() { return cGroup_3_3; }
		
		//","
		public Keyword getCommaKeyword_3_3_0() { return cCommaKeyword_3_3_0; }
		
		//cellstate+=[CellState|EString]
		public Assignment getCellstateAssignment_3_3_1() { return cCellstateAssignment_3_3_1; }
		
		//[CellState|EString]
		public CrossReference getCellstateCellStateCrossReference_3_3_1_0() { return cCellstateCellStateCrossReference_3_3_1_0; }
		
		//EString
		public RuleCall getCellstateCellStateEStringParserRuleCall_3_3_1_0_1() { return cCellstateCellStateEStringParserRuleCall_3_3_1_0_1; }
		
		//')'
		public Keyword getRightParenthesisKeyword_3_4() { return cRightParenthesisKeyword_3_4; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
	}
	public class EBooleanElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "no.ntnu.tdt4250.g07.bg.bgdl.BoardgameDL.EBoolean");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cTrueKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cFalseKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		
		//EBoolean returns ecore::EBoolean:
		//    'true' | 'false';
		@Override public ParserRule getRule() { return rule; }
		
		//'true' | 'false'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//'true'
		public Keyword getTrueKeyword_0() { return cTrueKeyword_0; }
		
		//'false'
		public Keyword getFalseKeyword_1() { return cFalseKeyword_1; }
	}
	public class EIntElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "no.ntnu.tdt4250.g07.bg.bgdl.BoardgameDL.EInt");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cHyphenMinusKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cINTTerminalRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		
		//EInt returns ecore::EInt:
		//    '-'? INT;
		@Override public ParserRule getRule() { return rule; }
		
		//'-'? INT
		public Group getGroup() { return cGroup; }
		
		//'-'?
		public Keyword getHyphenMinusKeyword_0() { return cHyphenMinusKeyword_0; }
		
		//INT
		public RuleCall getINTTerminalRuleCall_1() { return cINTTerminalRuleCall_1; }
	}
	public class InARowElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "no.ntnu.tdt4250.g07.bg.bgdl.BoardgameDL.InARow");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cDiagonalAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cDiagonalDiagonalKeyword_0_0 = (Keyword)cDiagonalAssignment_0.eContents().get(0);
		private final Assignment cHorizontalAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final Keyword cHorizontalHorizontalKeyword_1_0 = (Keyword)cHorizontalAssignment_1.eContents().get(0);
		private final Assignment cVerticalAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final Keyword cVerticalVerticalKeyword_2_0 = (Keyword)cVerticalAssignment_2.eContents().get(0);
		private final Keyword cInARowKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Keyword cLeftCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Keyword cCountKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cCountAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cCountEIntParserRuleCall_6_0 = (RuleCall)cCountAssignment_6.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_7 = (Keyword)cGroup.eContents().get(7);
		
		//InARow returns InARow:
		//    diagonal?='diagonal'
		//    horizontal?='horizontal'
		//    vertical?='vertical'
		//    'InARow'
		//    '{'
		//        'count' count=EInt
		//    '}';
		@Override public ParserRule getRule() { return rule; }
		
		//diagonal?='diagonal'
		//horizontal?='horizontal'
		//vertical?='vertical'
		//'InARow'
		//'{'
		//    'count' count=EInt
		//'}'
		public Group getGroup() { return cGroup; }
		
		//diagonal?='diagonal'
		public Assignment getDiagonalAssignment_0() { return cDiagonalAssignment_0; }
		
		//'diagonal'
		public Keyword getDiagonalDiagonalKeyword_0_0() { return cDiagonalDiagonalKeyword_0_0; }
		
		//horizontal?='horizontal'
		public Assignment getHorizontalAssignment_1() { return cHorizontalAssignment_1; }
		
		//'horizontal'
		public Keyword getHorizontalHorizontalKeyword_1_0() { return cHorizontalHorizontalKeyword_1_0; }
		
		//vertical?='vertical'
		public Assignment getVerticalAssignment_2() { return cVerticalAssignment_2; }
		
		//'vertical'
		public Keyword getVerticalVerticalKeyword_2_0() { return cVerticalVerticalKeyword_2_0; }
		
		//'InARow'
		public Keyword getInARowKeyword_3() { return cInARowKeyword_3; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_4() { return cLeftCurlyBracketKeyword_4; }
		
		//'count'
		public Keyword getCountKeyword_5() { return cCountKeyword_5; }
		
		//count=EInt
		public Assignment getCountAssignment_6() { return cCountAssignment_6; }
		
		//EInt
		public RuleCall getCountEIntParserRuleCall_6_0() { return cCountEIntParserRuleCall_6_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_7() { return cRightCurlyBracketKeyword_7; }
	}
	
	
	private final BoardGameElements pBoardGame;
	private final EStringElements pEString;
	private final PieceTypeElements pPieceType;
	private final CellStateElements pCellState;
	private final WinConditionElements pWinCondition;
	private final ValidMoveElements pValidMove;
	private final EffectOnCellElements pEffectOnCell;
	private final ConditionElements pCondition;
	private final EBooleanElements pEBoolean;
	private final EIntElements pEInt;
	private final InARowElements pInARow;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public BoardgameDLGrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pBoardGame = new BoardGameElements();
		this.pEString = new EStringElements();
		this.pPieceType = new PieceTypeElements();
		this.pCellState = new CellStateElements();
		this.pWinCondition = new WinConditionElements();
		this.pValidMove = new ValidMoveElements();
		this.pEffectOnCell = new EffectOnCellElements();
		this.pCondition = new ConditionElements();
		this.pEBoolean = new EBooleanElements();
		this.pEInt = new EIntElements();
		this.pInARow = new InARowElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("no.ntnu.tdt4250.g07.bg.bgdl.BoardgameDL".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//BoardGame returns BoardGame:
	//    piecetypes+=PieceType*
	//    cellstate+=CellState*
	//    wincondition+=WinCondition*
	//    'Size' size=EInt;
	public BoardGameElements getBoardGameAccess() {
		return pBoardGame;
	}
	
	public ParserRule getBoardGameRule() {
		return getBoardGameAccess().getRule();
	}
	
	//EString returns ecore::EString:
	//    STRING | ID;
	public EStringElements getEStringAccess() {
		return pEString;
	}
	
	public ParserRule getEStringRule() {
		return getEStringAccess().getRule();
	}
	
	//PieceType returns PieceType:
	//    'PieceType'
	//    name=EString
	//    '{'
	//        'symbol' symbol=EString
	//        'validmove' '{' validmove+=ValidMove ( "," validmove+=ValidMove)* '}'
	//        ('effectoncell' '{' effectoncell+=EffectOnCell ( "," effectoncell+=EffectOnCell)* '}' )?
	//    '}';
	public PieceTypeElements getPieceTypeAccess() {
		return pPieceType;
	}
	
	public ParserRule getPieceTypeRule() {
		return getPieceTypeAccess().getRule();
	}
	
	//CellState returns CellState:
	//    {CellState}
	//    'CellState'
	//    ;
	public CellStateElements getCellStateAccess() {
		return pCellState;
	}
	
	public ParserRule getCellStateRule() {
		return getCellStateAccess().getRule();
	}
	
	//WinCondition returns WinCondition:
	//    'WinCondition'
	//    '{'
	//        'inarow' inarow=InARow
	//    '}';
	public WinConditionElements getWinConditionAccess() {
		return pWinCondition;
	}
	
	public ParserRule getWinConditionRule() {
		return getWinConditionAccess().getRule();
	}
	
	//ValidMove returns ValidMove:
	//    placeAnywhere?='placeAnywhere'
	//    'ValidMove'
	//    '{'
	//        ('condition' '{' condition+=Condition ( "," condition+=Condition)* '}' )?
	//    '}';
	public ValidMoveElements getValidMoveAccess() {
		return pValidMove;
	}
	
	public ParserRule getValidMoveRule() {
		return getValidMoveAccess().getRule();
	}
	
	//EffectOnCell returns EffectOnCell:
	//    'EffectOnCell'
	//    '{'
	//        'x' x=EInt
	//        'y' y=EInt
	//        'cellstate' cellstate=[CellState|EString]
	//    '}';
	public EffectOnCellElements getEffectOnCellAccess() {
		return pEffectOnCell;
	}
	
	public ParserRule getEffectOnCellRule() {
		return getEffectOnCellAccess().getRule();
	}
	
	//Condition returns Condition:
	//    {Condition}
	//    'Condition'
	//    '{'
	//        ('cellstate' '(' cellstate+=[CellState|EString] ( "," cellstate+=[CellState|EString])* ')' )?
	//    '}';
	public ConditionElements getConditionAccess() {
		return pCondition;
	}
	
	public ParserRule getConditionRule() {
		return getConditionAccess().getRule();
	}
	
	//EBoolean returns ecore::EBoolean:
	//    'true' | 'false';
	public EBooleanElements getEBooleanAccess() {
		return pEBoolean;
	}
	
	public ParserRule getEBooleanRule() {
		return getEBooleanAccess().getRule();
	}
	
	//EInt returns ecore::EInt:
	//    '-'? INT;
	public EIntElements getEIntAccess() {
		return pEInt;
	}
	
	public ParserRule getEIntRule() {
		return getEIntAccess().getRule();
	}
	
	//InARow returns InARow:
	//    diagonal?='diagonal'
	//    horizontal?='horizontal'
	//    vertical?='vertical'
	//    'InARow'
	//    '{'
	//        'count' count=EInt
	//    '}';
	public InARowElements getInARowAccess() {
		return pInARow;
	}
	
	public ParserRule getInARowRule() {
		return getInARowAccess().getRule();
	}
	
	//terminal ID: '^'?('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	}
	
	//terminal INT returns ecore::EInt: ('0'..'9')+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal STRING:
	//            '"' ( '\\' . /* 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' */ | !('\\'|'"') )* '"' |
	//            "'" ( '\\' . /* 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' */ | !('\\'|"'") )* "'"
	//        ;
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal ML_COMMENT : '/*' -> '*/';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT : '//' !('\n'|'\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS         : (' '|'\t'|'\r'|'\n')+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER: .;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
