/*
 * generated by Xtext 2.36.0
 */
package no.ntnu.tdt4250.g07.bg.bgdl.serializer;

import com.google.inject.Inject;
import java.util.Set;
import no.ntnu.tdt4250.g07.bg.BgPackage;
import no.ntnu.tdt4250.g07.bg.BoardGame;
import no.ntnu.tdt4250.g07.bg.CellState;
import no.ntnu.tdt4250.g07.bg.Condition;
import no.ntnu.tdt4250.g07.bg.EffectOnCell;
import no.ntnu.tdt4250.g07.bg.InARow;
import no.ntnu.tdt4250.g07.bg.PieceType;
import no.ntnu.tdt4250.g07.bg.ValidMove;
import no.ntnu.tdt4250.g07.bg.WinCondition;
import no.ntnu.tdt4250.g07.bg.bgdl.services.BoardGameDLGrammarAccess;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Parameter;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.serializer.ISerializationContext;
import org.eclipse.xtext.serializer.acceptor.SequenceFeeder;
import org.eclipse.xtext.serializer.sequencer.AbstractDelegatingSemanticSequencer;
import org.eclipse.xtext.serializer.sequencer.ITransientValueService.ValueTransient;

@SuppressWarnings("all")
public class BoardGameDLSemanticSequencer extends AbstractDelegatingSemanticSequencer {

	@Inject
	private BoardGameDLGrammarAccess grammarAccess;
	
	@Override
	public void sequence(ISerializationContext context, EObject semanticObject) {
		EPackage epackage = semanticObject.eClass().getEPackage();
		ParserRule rule = context.getParserRule();
		Action action = context.getAssignedAction();
		Set<Parameter> parameters = context.getEnabledBooleanParameters();
		if (epackage == BgPackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case BgPackage.BOARD_GAME:
				sequence_BoardGame(context, (BoardGame) semanticObject); 
				return; 
			case BgPackage.CELL_STATE:
				sequence_CellState(context, (CellState) semanticObject); 
				return; 
			case BgPackage.CONDITION:
				sequence_Condition(context, (Condition) semanticObject); 
				return; 
			case BgPackage.EFFECT_ON_CELL:
				sequence_EffectOnCell(context, (EffectOnCell) semanticObject); 
				return; 
			case BgPackage.IN_AROW:
				sequence_InARow(context, (InARow) semanticObject); 
				return; 
			case BgPackage.PIECE_TYPE:
				sequence_PieceType(context, (PieceType) semanticObject); 
				return; 
			case BgPackage.VALID_MOVE:
				sequence_ValidMove(context, (ValidMove) semanticObject); 
				return; 
			case BgPackage.WIN_CONDITION:
				sequence_WinCondition(context, (WinCondition) semanticObject); 
				return; 
			}
		if (errorAcceptor != null)
			errorAcceptor.accept(diagnosticProvider.createInvalidContextOrTypeDiagnostic(semanticObject, context));
	}
	
	/**
	 * <pre>
	 * Contexts:
	 *     BoardGame returns BoardGame
	 *
	 * Constraint:
	 *     (
	 *         size=EInt 
	 *         piecetypes+=PieceType 
	 *         piecetypes+=PieceType* 
	 *         (cellstates+=CellState cellstates+=CellState*)? 
	 *         winConditions+=WinCondition 
	 *         winConditions+=WinCondition*
	 *     )
	 * </pre>
	 */
	protected void sequence_BoardGame(ISerializationContext context, BoardGame semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     CellState returns CellState
	 *
	 * Constraint:
	 *     name=ID
	 * </pre>
	 */
	protected void sequence_CellState(ISerializationContext context, CellState semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, BgPackage.Literals.CELL_STATE__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, BgPackage.Literals.CELL_STATE__NAME));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getCellStateAccess().getNameIDTerminalRuleCall_1_0(), semanticObject.getName());
		feeder.finish();
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Condition returns Condition
	 *
	 * Constraint:
	 *     cellstate=[CellState|EString]
	 * </pre>
	 */
	protected void sequence_Condition(ISerializationContext context, Condition semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, BgPackage.Literals.CONDITION__CELLSTATE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, BgPackage.Literals.CONDITION__CELLSTATE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getConditionAccess().getCellstateCellStateEStringParserRuleCall_3_0_1(), semanticObject.eGet(BgPackage.Literals.CONDITION__CELLSTATE, false));
		feeder.finish();
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     EffectOnCell returns EffectOnCell
	 *
	 * Constraint:
	 *     (x=EInt y=EInt cellstate=[CellState|EString])
	 * </pre>
	 */
	protected void sequence_EffectOnCell(ISerializationContext context, EffectOnCell semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, BgPackage.Literals.EFFECT_ON_CELL__X) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, BgPackage.Literals.EFFECT_ON_CELL__X));
			if (transientValues.isValueTransient(semanticObject, BgPackage.Literals.EFFECT_ON_CELL__Y) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, BgPackage.Literals.EFFECT_ON_CELL__Y));
			if (transientValues.isValueTransient(semanticObject, BgPackage.Literals.EFFECT_ON_CELL__CELLSTATE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, BgPackage.Literals.EFFECT_ON_CELL__CELLSTATE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getEffectOnCellAccess().getXEIntParserRuleCall_3_0(), semanticObject.getX());
		feeder.accept(grammarAccess.getEffectOnCellAccess().getYEIntParserRuleCall_5_0(), semanticObject.getY());
		feeder.accept(grammarAccess.getEffectOnCellAccess().getCellstateCellStateEStringParserRuleCall_7_0_1(), semanticObject.eGet(BgPackage.Literals.EFFECT_ON_CELL__CELLSTATE, false));
		feeder.finish();
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     InARow returns InARow
	 *
	 * Constraint:
	 *     (diagonal?='diagonal' horizontal?='horizontal' vertical?='vertical' count=EInt)
	 * </pre>
	 */
	protected void sequence_InARow(ISerializationContext context, InARow semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, BgPackage.Literals.IN_AROW__DIAGONAL) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, BgPackage.Literals.IN_AROW__DIAGONAL));
			if (transientValues.isValueTransient(semanticObject, BgPackage.Literals.IN_AROW__HORIZONTAL) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, BgPackage.Literals.IN_AROW__HORIZONTAL));
			if (transientValues.isValueTransient(semanticObject, BgPackage.Literals.IN_AROW__VERTICAL) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, BgPackage.Literals.IN_AROW__VERTICAL));
			if (transientValues.isValueTransient(semanticObject, BgPackage.Literals.IN_AROW__COUNT) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, BgPackage.Literals.IN_AROW__COUNT));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getInARowAccess().getDiagonalDiagonalKeyword_0_0(), semanticObject.isDiagonal());
		feeder.accept(grammarAccess.getInARowAccess().getHorizontalHorizontalKeyword_1_0(), semanticObject.isHorizontal());
		feeder.accept(grammarAccess.getInARowAccess().getVerticalVerticalKeyword_2_0(), semanticObject.isVertical());
		feeder.accept(grammarAccess.getInARowAccess().getCountEIntParserRuleCall_6_0(), semanticObject.getCount());
		feeder.finish();
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     PieceType returns PieceType
	 *
	 * Constraint:
	 *     (name=EString symbol=EString validmoves+=ValidMove validmoves+=ValidMove* (effectsoncell+=EffectOnCell effectsoncell+=EffectOnCell*)?)
	 * </pre>
	 */
	protected void sequence_PieceType(ISerializationContext context, PieceType semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     ValidMove returns ValidMove
	 *
	 * Constraint:
	 *     (placeAnywhere?='placeAnywhere' (conditions+=Condition conditions+=Condition*)?)
	 * </pre>
	 */
	protected void sequence_ValidMove(ISerializationContext context, ValidMove semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     WinCondition returns WinCondition
	 *
	 * Constraint:
	 *     inarow=InARow
	 * </pre>
	 */
	protected void sequence_WinCondition(ISerializationContext context, WinCondition semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, BgPackage.Literals.WIN_CONDITION__INAROW) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, BgPackage.Literals.WIN_CONDITION__INAROW));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getWinConditionAccess().getInarowInARowParserRuleCall_3_0(), semanticObject.getInarow());
		feeder.finish();
	}
	
	
}
