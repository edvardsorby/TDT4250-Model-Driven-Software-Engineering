/*
 * generated by Xtext
 */
package no.ntnu.tdt4250.g07.bg.bgdl.serializer;

import com.google.inject.Inject;
import java.util.Set;
import no.ntnu.tdt4250.g07.bg.BgPackage;
import no.ntnu.tdt4250.g07.bg.BoardGame;
import no.ntnu.tdt4250.g07.bg.CellState;
import no.ntnu.tdt4250.g07.bg.Condition;
import no.ntnu.tdt4250.g07.bg.EffectOnCell;
import no.ntnu.tdt4250.g07.bg.Line;
import no.ntnu.tdt4250.g07.bg.PieceType;
import no.ntnu.tdt4250.g07.bg.ValidMove;
import no.ntnu.tdt4250.g07.bg.WinCondition;
import no.ntnu.tdt4250.g07.bg.bgdl.services.BoardGameDLGrammarAccess;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Parameter;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.serializer.ISerializationContext;
import org.eclipse.xtext.serializer.acceptor.SequenceFeeder;
import org.eclipse.xtext.serializer.sequencer.AbstractDelegatingSemanticSequencer;
import org.eclipse.xtext.serializer.sequencer.ITransientValueService.ValueTransient;

@SuppressWarnings("all")
public class BoardGameDLSemanticSequencer extends AbstractDelegatingSemanticSequencer {

	@Inject
	private BoardGameDLGrammarAccess grammarAccess;
	
	@Override
	public void sequence(ISerializationContext context, EObject semanticObject) {
		EPackage epackage = semanticObject.eClass().getEPackage();
		ParserRule rule = context.getParserRule();
		Action action = context.getAssignedAction();
		Set<Parameter> parameters = context.getEnabledBooleanParameters();
		if (epackage == BgPackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case BgPackage.BOARD_GAME:
				sequence_BoardGame(context, (BoardGame) semanticObject); 
				return; 
			case BgPackage.CELL_STATE:
				sequence_CellState(context, (CellState) semanticObject); 
				return; 
			case BgPackage.CONDITION:
				sequence_Condition(context, (Condition) semanticObject); 
				return; 
			case BgPackage.EFFECT_ON_CELL:
				sequence_EffectOnCell(context, (EffectOnCell) semanticObject); 
				return; 
			case BgPackage.LINE:
				sequence_Line(context, (Line) semanticObject); 
				return; 
			case BgPackage.PIECE_TYPE:
				sequence_PieceType(context, (PieceType) semanticObject); 
				return; 
			case BgPackage.VALID_MOVE:
				sequence_ValidMove(context, (ValidMove) semanticObject); 
				return; 
			case BgPackage.WIN_CONDITION:
				sequence_WinCondition(context, (WinCondition) semanticObject); 
				return; 
			}
		if (errorAcceptor != null)
			errorAcceptor.accept(diagnosticProvider.createInvalidContextOrTypeDiagnostic(semanticObject, context));
	}
	
	/**
	 * <pre>
	 * Contexts:
	 *     BoardGame returns BoardGame
	 *
	 * Constraint:
	 *     (name=EString size=EInt boardGameElements+=BoardGameElement*)
	 * </pre>
	 */
	protected void sequence_BoardGame(ISerializationContext context, BoardGame semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     BoardGameElement returns CellState
	 *     CellState returns CellState
	 *
	 * Constraint:
	 *     name=EString
	 * </pre>
	 */
	protected void sequence_CellState(ISerializationContext context, CellState semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, BgPackage.Literals.CELL_STATE__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, BgPackage.Literals.CELL_STATE__NAME));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getCellStateAccess().getNameEStringParserRuleCall_1_0(), semanticObject.getName());
		feeder.finish();
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     BoardGameElement returns Condition
	 *     Condition returns Condition
	 *
	 * Constraint:
	 *     (name=ID cellState=[CellState|EString])
	 * </pre>
	 */
	protected void sequence_Condition(ISerializationContext context, Condition semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, BgPackage.Literals.CONDITION__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, BgPackage.Literals.CONDITION__NAME));
			if (transientValues.isValueTransient(semanticObject, BgPackage.Literals.CONDITION__CELL_STATE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, BgPackage.Literals.CONDITION__CELL_STATE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getConditionAccess().getNameIDTerminalRuleCall_1_0(), semanticObject.getName());
		feeder.accept(grammarAccess.getConditionAccess().getCellStateCellStateEStringParserRuleCall_2_0_1(), semanticObject.eGet(BgPackage.Literals.CONDITION__CELL_STATE, false));
		feeder.finish();
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     BoardGameElement returns EffectOnCell
	 *     EffectOnCell returns EffectOnCell
	 *
	 * Constraint:
	 *     (name=ID ((x=EInt y=EInt) | cellState=[CellState|EString])+)
	 * </pre>
	 */
	protected void sequence_EffectOnCell(ISerializationContext context, EffectOnCell semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     WinConditionElement returns Line
	 *     Line returns Line
	 *
	 * Constraint:
	 *     (length=EInt direction=Direction)
	 * </pre>
	 */
	protected void sequence_Line(ISerializationContext context, Line semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, BgPackage.Literals.LINE__LENGTH) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, BgPackage.Literals.LINE__LENGTH));
			if (transientValues.isValueTransient(semanticObject, BgPackage.Literals.LINE__DIRECTION) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, BgPackage.Literals.LINE__DIRECTION));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getLineAccess().getLengthEIntParserRuleCall_2_0(), semanticObject.getLength());
		feeder.accept(grammarAccess.getLineAccess().getDirectionDirectionEnumRuleCall_4_0(), semanticObject.getDirection());
		feeder.finish();
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     BoardGameElement returns PieceType
	 *     PieceType returns PieceType
	 *
	 * Constraint:
	 *     (
	 *         name=EString 
	 *         symbol=EString 
	 *         validMoves+=[ValidMove|EString] 
	 *         validMoves+=[ValidMove|EString]* 
	 *         (effectsoncell+=[EffectOnCell|EString] effectsoncell+=[EffectOnCell|EString]*)?
	 *     )
	 * </pre>
	 */
	protected void sequence_PieceType(ISerializationContext context, PieceType semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     BoardGameElement returns ValidMove
	 *     ValidMove returns ValidMove
	 *
	 * Constraint:
	 *     (name=ID placeAnywhere?='placeAnywhere' (conditions+=[Condition|EString] conditions+=[Condition|EString]*)?)
	 * </pre>
	 */
	protected void sequence_ValidMove(ISerializationContext context, ValidMove semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     BoardGameElement returns WinCondition
	 *     WinCondition returns WinCondition
	 *
	 * Constraint:
	 *     (winConditionElements+=WinConditionElement winConditionElements+=WinConditionElement*)
	 * </pre>
	 */
	protected void sequence_WinCondition(ISerializationContext context, WinCondition semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
}
