/*
 * generated by Xtext
 */
package no.ntnu.tdt4250.g07.bg.bgdl.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.CrossReference;
import org.eclipse.xtext.EnumLiteralDeclaration;
import org.eclipse.xtext.EnumRule;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.UnorderedGroup;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class BoardGameDLGrammarAccess extends AbstractElementFinder.AbstractGrammarElementFinder {
	
	public class BoardGameElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "no.ntnu.tdt4250.g07.bg.bgdl.BoardGameDL.BoardGame");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cTitleKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameEStringParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cBoardSizeKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cSizeAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cSizeEIntParserRuleCall_3_0 = (RuleCall)cSizeAssignment_3.eContents().get(0);
		private final Assignment cBoardGameElementsAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cBoardGameElementsBoardGameElementParserRuleCall_4_0 = (RuleCall)cBoardGameElementsAssignment_4.eContents().get(0);
		
		//BoardGame returns BoardGame:
		//    'Title' (name = EString)
		//    'BoardSize' size=EInt
		//     (boardGameElements+=BoardGameElement)*
		//    ;
		@Override public ParserRule getRule() { return rule; }
		
		//'Title' (name = EString)
		//'BoardSize' size=EInt
		// (boardGameElements+=BoardGameElement)*
		public Group getGroup() { return cGroup; }
		
		//'Title'
		public Keyword getTitleKeyword_0() { return cTitleKeyword_0; }
		
		//(name = EString)
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//EString
		public RuleCall getNameEStringParserRuleCall_1_0() { return cNameEStringParserRuleCall_1_0; }
		
		//'BoardSize'
		public Keyword getBoardSizeKeyword_2() { return cBoardSizeKeyword_2; }
		
		//size=EInt
		public Assignment getSizeAssignment_3() { return cSizeAssignment_3; }
		
		//EInt
		public RuleCall getSizeEIntParserRuleCall_3_0() { return cSizeEIntParserRuleCall_3_0; }
		
		//(boardGameElements+=BoardGameElement)*
		public Assignment getBoardGameElementsAssignment_4() { return cBoardGameElementsAssignment_4; }
		
		//BoardGameElement
		public RuleCall getBoardGameElementsBoardGameElementParserRuleCall_4_0() { return cBoardGameElementsBoardGameElementParserRuleCall_4_0; }
	}
	public class BoardGameElementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "no.ntnu.tdt4250.g07.bg.bgdl.BoardGameDL.BoardGameElement");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cPieceTypeParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cEffectOnCellParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cCellStateParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cWinConditionParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		
		//BoardGameElement returns BoardGameElement:
		//    PieceType | EffectOnCell | CellState | WinCondition
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//PieceType | EffectOnCell | CellState | WinCondition
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//PieceType
		public RuleCall getPieceTypeParserRuleCall_0() { return cPieceTypeParserRuleCall_0; }
		
		//EffectOnCell
		public RuleCall getEffectOnCellParserRuleCall_1() { return cEffectOnCellParserRuleCall_1; }
		
		//CellState
		public RuleCall getCellStateParserRuleCall_2() { return cCellStateParserRuleCall_2; }
		
		//WinCondition
		public RuleCall getWinConditionParserRuleCall_3() { return cWinConditionParserRuleCall_3; }
	}
	public class PieceTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "no.ntnu.tdt4250.g07.bg.bgdl.BoardGameDL.PieceType");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cPieceTypeKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameEStringParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cSymbolKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cSymbolAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cSymbolEStringParserRuleCall_4_0 = (RuleCall)cSymbolAssignment_4.eContents().get(0);
		private final Keyword cDisallowedStatesKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cDisallowedStatesAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final CrossReference cDisallowedStatesCellStateCrossReference_6_0 = (CrossReference)cDisallowedStatesAssignment_6.eContents().get(0);
		private final RuleCall cDisallowedStatesCellStateEStringParserRuleCall_6_0_1 = (RuleCall)cDisallowedStatesCellStateCrossReference_6_0.eContents().get(1);
		private final Group cGroup_7 = (Group)cGroup.eContents().get(7);
		private final Keyword cCommaKeyword_7_0 = (Keyword)cGroup_7.eContents().get(0);
		private final Assignment cDisallowedStatesAssignment_7_1 = (Assignment)cGroup_7.eContents().get(1);
		private final CrossReference cDisallowedStatesCellStateCrossReference_7_1_0 = (CrossReference)cDisallowedStatesAssignment_7_1.eContents().get(0);
		private final RuleCall cDisallowedStatesCellStateEStringParserRuleCall_7_1_0_1 = (RuleCall)cDisallowedStatesCellStateCrossReference_7_1_0.eContents().get(1);
		private final Group cGroup_8 = (Group)cGroup.eContents().get(8);
		private final Keyword cEffectsOnCellKeyword_8_0 = (Keyword)cGroup_8.eContents().get(0);
		private final Assignment cEffectsoncellAssignment_8_1 = (Assignment)cGroup_8.eContents().get(1);
		private final CrossReference cEffectsoncellEffectOnCellCrossReference_8_1_0 = (CrossReference)cEffectsoncellAssignment_8_1.eContents().get(0);
		private final RuleCall cEffectsoncellEffectOnCellEStringParserRuleCall_8_1_0_1 = (RuleCall)cEffectsoncellEffectOnCellCrossReference_8_1_0.eContents().get(1);
		private final Group cGroup_8_2 = (Group)cGroup_8.eContents().get(2);
		private final Keyword cCommaKeyword_8_2_0 = (Keyword)cGroup_8_2.eContents().get(0);
		private final Assignment cEffectsoncellAssignment_8_2_1 = (Assignment)cGroup_8_2.eContents().get(1);
		private final CrossReference cEffectsoncellEffectOnCellCrossReference_8_2_1_0 = (CrossReference)cEffectsoncellAssignment_8_2_1.eContents().get(0);
		private final RuleCall cEffectsoncellEffectOnCellEStringParserRuleCall_8_2_1_0_1 = (RuleCall)cEffectsoncellEffectOnCellCrossReference_8_2_1_0.eContents().get(1);
		private final Keyword cRightCurlyBracketKeyword_9 = (Keyword)cGroup.eContents().get(9);
		
		//PieceType returns PieceType:
		//    'PieceType'
		//    name=EString '{'
		//        'Symbol' symbol=EString
		//        'DisallowedStates' disallowedStates+= [CellState|EString] ( "," disallowedStates+=[CellState | EString])*
		//        ('EffectsOnCell' effectsoncell+=[EffectOnCell|EString] ( "," effectsoncell+=[EffectOnCell|EString])* )?
		//    '}';
		@Override public ParserRule getRule() { return rule; }
		
		//'PieceType'
		//name=EString '{'
		//    'Symbol' symbol=EString
		//    'DisallowedStates' disallowedStates+= [CellState|EString] ( "," disallowedStates+=[CellState | EString])*
		//    ('EffectsOnCell' effectsoncell+=[EffectOnCell|EString] ( "," effectsoncell+=[EffectOnCell|EString])* )?
		//'}'
		public Group getGroup() { return cGroup; }
		
		//'PieceType'
		public Keyword getPieceTypeKeyword_0() { return cPieceTypeKeyword_0; }
		
		//name=EString
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//EString
		public RuleCall getNameEStringParserRuleCall_1_0() { return cNameEStringParserRuleCall_1_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }
		
		//'Symbol'
		public Keyword getSymbolKeyword_3() { return cSymbolKeyword_3; }
		
		//symbol=EString
		public Assignment getSymbolAssignment_4() { return cSymbolAssignment_4; }
		
		//EString
		public RuleCall getSymbolEStringParserRuleCall_4_0() { return cSymbolEStringParserRuleCall_4_0; }
		
		//'DisallowedStates'
		public Keyword getDisallowedStatesKeyword_5() { return cDisallowedStatesKeyword_5; }
		
		//disallowedStates+= [CellState|EString]
		public Assignment getDisallowedStatesAssignment_6() { return cDisallowedStatesAssignment_6; }
		
		//[CellState|EString]
		public CrossReference getDisallowedStatesCellStateCrossReference_6_0() { return cDisallowedStatesCellStateCrossReference_6_0; }
		
		//EString
		public RuleCall getDisallowedStatesCellStateEStringParserRuleCall_6_0_1() { return cDisallowedStatesCellStateEStringParserRuleCall_6_0_1; }
		
		//( "," disallowedStates+=[CellState | EString])*
		public Group getGroup_7() { return cGroup_7; }
		
		//","
		public Keyword getCommaKeyword_7_0() { return cCommaKeyword_7_0; }
		
		//disallowedStates+=[CellState | EString]
		public Assignment getDisallowedStatesAssignment_7_1() { return cDisallowedStatesAssignment_7_1; }
		
		//[CellState | EString]
		public CrossReference getDisallowedStatesCellStateCrossReference_7_1_0() { return cDisallowedStatesCellStateCrossReference_7_1_0; }
		
		//EString
		public RuleCall getDisallowedStatesCellStateEStringParserRuleCall_7_1_0_1() { return cDisallowedStatesCellStateEStringParserRuleCall_7_1_0_1; }
		
		//('EffectsOnCell' effectsoncell+=[EffectOnCell|EString] ( "," effectsoncell+=[EffectOnCell|EString])* )?
		public Group getGroup_8() { return cGroup_8; }
		
		//'EffectsOnCell'
		public Keyword getEffectsOnCellKeyword_8_0() { return cEffectsOnCellKeyword_8_0; }
		
		//effectsoncell+=[EffectOnCell|EString]
		public Assignment getEffectsoncellAssignment_8_1() { return cEffectsoncellAssignment_8_1; }
		
		//[EffectOnCell|EString]
		public CrossReference getEffectsoncellEffectOnCellCrossReference_8_1_0() { return cEffectsoncellEffectOnCellCrossReference_8_1_0; }
		
		//EString
		public RuleCall getEffectsoncellEffectOnCellEStringParserRuleCall_8_1_0_1() { return cEffectsoncellEffectOnCellEStringParserRuleCall_8_1_0_1; }
		
		//( "," effectsoncell+=[EffectOnCell|EString])*
		public Group getGroup_8_2() { return cGroup_8_2; }
		
		//","
		public Keyword getCommaKeyword_8_2_0() { return cCommaKeyword_8_2_0; }
		
		//effectsoncell+=[EffectOnCell|EString]
		public Assignment getEffectsoncellAssignment_8_2_1() { return cEffectsoncellAssignment_8_2_1; }
		
		//[EffectOnCell|EString]
		public CrossReference getEffectsoncellEffectOnCellCrossReference_8_2_1_0() { return cEffectsoncellEffectOnCellCrossReference_8_2_1_0; }
		
		//EString
		public RuleCall getEffectsoncellEffectOnCellEStringParserRuleCall_8_2_1_0_1() { return cEffectsoncellEffectOnCellEStringParserRuleCall_8_2_1_0_1; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_9() { return cRightCurlyBracketKeyword_9; }
	}
	public class CellStateElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "no.ntnu.tdt4250.g07.bg.bgdl.BoardGameDL.CellState");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cCellstateKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameEStringParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		
		//CellState returns CellState:
		//    'Cellstate' name=EString
		//    ;
		@Override public ParserRule getRule() { return rule; }
		
		//'Cellstate' name=EString
		public Group getGroup() { return cGroup; }
		
		//'Cellstate'
		public Keyword getCellstateKeyword_0() { return cCellstateKeyword_0; }
		
		//name=EString
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//EString
		public RuleCall getNameEStringParserRuleCall_1_0() { return cNameEStringParserRuleCall_1_0; }
	}
	public class WinConditionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "no.ntnu.tdt4250.g07.bg.bgdl.BoardGameDL.WinCondition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cWinConditionKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cWinConditionElementsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cWinConditionElementsWinConditionElementParserRuleCall_2_0 = (RuleCall)cWinConditionElementsAssignment_2.eContents().get(0);
		private final Assignment cWinConditionElementsAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cWinConditionElementsWinConditionElementParserRuleCall_3_0 = (RuleCall)cWinConditionElementsAssignment_3.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//WinCondition returns WinCondition:
		//        'WinCondition' '{' winConditionElements+=WinConditionElement (winConditionElements+=WinConditionElement)* '}';
		@Override public ParserRule getRule() { return rule; }
		
		//'WinCondition' '{' winConditionElements+=WinConditionElement (winConditionElements+=WinConditionElement)* '}'
		public Group getGroup() { return cGroup; }
		
		//'WinCondition'
		public Keyword getWinConditionKeyword_0() { return cWinConditionKeyword_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }
		
		//winConditionElements+=WinConditionElement
		public Assignment getWinConditionElementsAssignment_2() { return cWinConditionElementsAssignment_2; }
		
		//WinConditionElement
		public RuleCall getWinConditionElementsWinConditionElementParserRuleCall_2_0() { return cWinConditionElementsWinConditionElementParserRuleCall_2_0; }
		
		//(winConditionElements+=WinConditionElement)*
		public Assignment getWinConditionElementsAssignment_3() { return cWinConditionElementsAssignment_3; }
		
		//WinConditionElement
		public RuleCall getWinConditionElementsWinConditionElementParserRuleCall_3_0() { return cWinConditionElementsWinConditionElementParserRuleCall_3_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
	}
	public class EIntElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "no.ntnu.tdt4250.g07.bg.bgdl.BoardGameDL.EInt");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cHyphenMinusKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cINTTerminalRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		
		//EInt returns ecore::EInt:
		//    '-'? INT;
		@Override public ParserRule getRule() { return rule; }
		
		//'-'? INT
		public Group getGroup() { return cGroup; }
		
		//'-'?
		public Keyword getHyphenMinusKeyword_0() { return cHyphenMinusKeyword_0; }
		
		//INT
		public RuleCall getINTTerminalRuleCall_1() { return cINTTerminalRuleCall_1; }
	}
	public class EStringElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "no.ntnu.tdt4250.g07.bg.bgdl.BoardGameDL.EString");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cSTRINGTerminalRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cIDTerminalRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//EString returns ecore::EString:
		//    STRING | ID;
		@Override public ParserRule getRule() { return rule; }
		
		//STRING | ID
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//STRING
		public RuleCall getSTRINGTerminalRuleCall_0() { return cSTRINGTerminalRuleCall_0; }
		
		//ID
		public RuleCall getIDTerminalRuleCall_1() { return cIDTerminalRuleCall_1; }
	}
	public class EffectOnCellElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "no.ntnu.tdt4250.g07.bg.bgdl.BoardGameDL.EffectOnCell");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cEffectOnCellKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final UnorderedGroup cUnorderedGroup_3 = (UnorderedGroup)cGroup.eContents().get(3);
		private final Group cGroup_3_0 = (Group)cUnorderedGroup_3.eContents().get(0);
		private final Keyword cRelativePositionKeyword_3_0_0 = (Keyword)cGroup_3_0.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_3_0_1 = (Keyword)cGroup_3_0.eContents().get(1);
		private final Assignment cXAssignment_3_0_2 = (Assignment)cGroup_3_0.eContents().get(2);
		private final RuleCall cXEIntParserRuleCall_3_0_2_0 = (RuleCall)cXAssignment_3_0_2.eContents().get(0);
		private final Keyword cCommaKeyword_3_0_3 = (Keyword)cGroup_3_0.eContents().get(3);
		private final Assignment cYAssignment_3_0_4 = (Assignment)cGroup_3_0.eContents().get(4);
		private final RuleCall cYEIntParserRuleCall_3_0_4_0 = (RuleCall)cYAssignment_3_0_4.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3_0_5 = (Keyword)cGroup_3_0.eContents().get(5);
		private final Group cGroup_3_1 = (Group)cUnorderedGroup_3.eContents().get(1);
		private final Keyword cNewCellStateKeyword_3_1_0 = (Keyword)cGroup_3_1.eContents().get(0);
		private final Assignment cCellStateAssignment_3_1_1 = (Assignment)cGroup_3_1.eContents().get(1);
		private final CrossReference cCellStateCellStateCrossReference_3_1_1_0 = (CrossReference)cCellStateAssignment_3_1_1.eContents().get(0);
		private final RuleCall cCellStateCellStateEStringParserRuleCall_3_1_1_0_1 = (RuleCall)cCellStateCellStateCrossReference_3_1_1_0.eContents().get(1);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//EffectOnCell returns EffectOnCell:
		//    'EffectOnCell' name=ID '{'
		//        (
		//        'relativePosition' '('x=EInt','y=EInt')' &
		//        'newCellState'cellState=[CellState|EString]
		//        )
		//    '}';
		@Override public ParserRule getRule() { return rule; }
		
		//'EffectOnCell' name=ID '{'
		//    (
		//    'relativePosition' '('x=EInt','y=EInt')' &
		//    'newCellState'cellState=[CellState|EString]
		//    )
		//'}'
		public Group getGroup() { return cGroup; }
		
		//'EffectOnCell'
		public Keyword getEffectOnCellKeyword_0() { return cEffectOnCellKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }
		
		//(
		//'relativePosition' '('x=EInt','y=EInt')' &
		//'newCellState'cellState=[CellState|EString]
		//)
		public UnorderedGroup getUnorderedGroup_3() { return cUnorderedGroup_3; }
		
		//'relativePosition' '('x=EInt','y=EInt')'
		public Group getGroup_3_0() { return cGroup_3_0; }
		
		//'relativePosition'
		public Keyword getRelativePositionKeyword_3_0_0() { return cRelativePositionKeyword_3_0_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_3_0_1() { return cLeftParenthesisKeyword_3_0_1; }
		
		//x=EInt
		public Assignment getXAssignment_3_0_2() { return cXAssignment_3_0_2; }
		
		//EInt
		public RuleCall getXEIntParserRuleCall_3_0_2_0() { return cXEIntParserRuleCall_3_0_2_0; }
		
		//','
		public Keyword getCommaKeyword_3_0_3() { return cCommaKeyword_3_0_3; }
		
		//y=EInt
		public Assignment getYAssignment_3_0_4() { return cYAssignment_3_0_4; }
		
		//EInt
		public RuleCall getYEIntParserRuleCall_3_0_4_0() { return cYEIntParserRuleCall_3_0_4_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_3_0_5() { return cRightParenthesisKeyword_3_0_5; }
		
		//'newCellState'cellState=[CellState|EString]
		public Group getGroup_3_1() { return cGroup_3_1; }
		
		//'newCellState'
		public Keyword getNewCellStateKeyword_3_1_0() { return cNewCellStateKeyword_3_1_0; }
		
		//cellState=[CellState|EString]
		public Assignment getCellStateAssignment_3_1_1() { return cCellStateAssignment_3_1_1; }
		
		//[CellState|EString]
		public CrossReference getCellStateCellStateCrossReference_3_1_1_0() { return cCellStateCellStateCrossReference_3_1_1_0; }
		
		//EString
		public RuleCall getCellStateCellStateEStringParserRuleCall_3_1_1_0_1() { return cCellStateCellStateEStringParserRuleCall_3_1_1_0_1; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
	}
	public class EBooleanElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "no.ntnu.tdt4250.g07.bg.bgdl.BoardGameDL.EBoolean");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cTrueKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cFalseKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		
		//EBoolean returns ecore::EBoolean:
		//    'true' | 'false';
		@Override public ParserRule getRule() { return rule; }
		
		//'true' | 'false'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//'true'
		public Keyword getTrueKeyword_0() { return cTrueKeyword_0; }
		
		//'false'
		public Keyword getFalseKeyword_1() { return cFalseKeyword_1; }
	}
	public class WinConditionElementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "no.ntnu.tdt4250.g07.bg.bgdl.BoardGameDL.WinConditionElement");
		private final RuleCall cLineParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		//WinConditionElement returns WinConditionElement:
		//    Line
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//Line
		public RuleCall getLineParserRuleCall() { return cLineParserRuleCall; }
	}
	public class LineElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "no.ntnu.tdt4250.g07.bg.bgdl.BoardGameDL.Line");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLineKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLengthKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cLengthAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cLengthEIntParserRuleCall_2_0 = (RuleCall)cLengthAssignment_2.eContents().get(0);
		private final Keyword cDirectionKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cDirectionAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cDirectionDirectionEnumRuleCall_4_0 = (RuleCall)cDirectionAssignment_4.eContents().get(0);
		
		//Line returns Line:
		//    'Line'
		//    'length' length=EInt
		//    'direction' direction=Direction
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'Line'
		//'length' length=EInt
		//'direction' direction=Direction
		public Group getGroup() { return cGroup; }
		
		//'Line'
		public Keyword getLineKeyword_0() { return cLineKeyword_0; }
		
		//'length'
		public Keyword getLengthKeyword_1() { return cLengthKeyword_1; }
		
		//length=EInt
		public Assignment getLengthAssignment_2() { return cLengthAssignment_2; }
		
		//EInt
		public RuleCall getLengthEIntParserRuleCall_2_0() { return cLengthEIntParserRuleCall_2_0; }
		
		//'direction'
		public Keyword getDirectionKeyword_3() { return cDirectionKeyword_3; }
		
		//direction=Direction
		public Assignment getDirectionAssignment_4() { return cDirectionAssignment_4; }
		
		//Direction
		public RuleCall getDirectionDirectionEnumRuleCall_4_0() { return cDirectionDirectionEnumRuleCall_4_0; }
	}
	
	public class DirectionElements extends AbstractElementFinder.AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "no.ntnu.tdt4250.g07.bg.bgdl.BoardGameDL.Direction");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cROWEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cROWROWKeyword_0_0 = (Keyword)cROWEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cCOLUMNEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cCOLUMNCOLUMNKeyword_1_0 = (Keyword)cCOLUMNEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cDIAGONALEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cDIAGONALDIAGONALKeyword_2_0 = (Keyword)cDIAGONALEnumLiteralDeclaration_2.eContents().get(0);
		
		//enum Direction:
		//    ROW | COLUMN | DIAGONAL
		//;
		public EnumRule getRule() { return rule; }
		
		//ROW | COLUMN | DIAGONAL
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//ROW
		public EnumLiteralDeclaration getROWEnumLiteralDeclaration_0() { return cROWEnumLiteralDeclaration_0; }
		
		public Keyword getROWROWKeyword_0_0() { return cROWROWKeyword_0_0; }
		
		//COLUMN
		public EnumLiteralDeclaration getCOLUMNEnumLiteralDeclaration_1() { return cCOLUMNEnumLiteralDeclaration_1; }
		
		public Keyword getCOLUMNCOLUMNKeyword_1_0() { return cCOLUMNCOLUMNKeyword_1_0; }
		
		//DIAGONAL
		public EnumLiteralDeclaration getDIAGONALEnumLiteralDeclaration_2() { return cDIAGONALEnumLiteralDeclaration_2; }
		
		public Keyword getDIAGONALDIAGONALKeyword_2_0() { return cDIAGONALDIAGONALKeyword_2_0; }
	}
	
	private final BoardGameElements pBoardGame;
	private final BoardGameElementElements pBoardGameElement;
	private final PieceTypeElements pPieceType;
	private final CellStateElements pCellState;
	private final WinConditionElements pWinCondition;
	private final EIntElements pEInt;
	private final EStringElements pEString;
	private final EffectOnCellElements pEffectOnCell;
	private final EBooleanElements pEBoolean;
	private final WinConditionElementElements pWinConditionElement;
	private final LineElements pLine;
	private final DirectionElements eDirection;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public BoardGameDLGrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pBoardGame = new BoardGameElements();
		this.pBoardGameElement = new BoardGameElementElements();
		this.pPieceType = new PieceTypeElements();
		this.pCellState = new CellStateElements();
		this.pWinCondition = new WinConditionElements();
		this.pEInt = new EIntElements();
		this.pEString = new EStringElements();
		this.pEffectOnCell = new EffectOnCellElements();
		this.pEBoolean = new EBooleanElements();
		this.pWinConditionElement = new WinConditionElementElements();
		this.pLine = new LineElements();
		this.eDirection = new DirectionElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("no.ntnu.tdt4250.g07.bg.bgdl.BoardGameDL".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//BoardGame returns BoardGame:
	//    'Title' (name = EString)
	//    'BoardSize' size=EInt
	//     (boardGameElements+=BoardGameElement)*
	//    ;
	public BoardGameElements getBoardGameAccess() {
		return pBoardGame;
	}
	
	public ParserRule getBoardGameRule() {
		return getBoardGameAccess().getRule();
	}
	
	//BoardGameElement returns BoardGameElement:
	//    PieceType | EffectOnCell | CellState | WinCondition
	//;
	public BoardGameElementElements getBoardGameElementAccess() {
		return pBoardGameElement;
	}
	
	public ParserRule getBoardGameElementRule() {
		return getBoardGameElementAccess().getRule();
	}
	
	//PieceType returns PieceType:
	//    'PieceType'
	//    name=EString '{'
	//        'Symbol' symbol=EString
	//        'DisallowedStates' disallowedStates+= [CellState|EString] ( "," disallowedStates+=[CellState | EString])*
	//        ('EffectsOnCell' effectsoncell+=[EffectOnCell|EString] ( "," effectsoncell+=[EffectOnCell|EString])* )?
	//    '}';
	public PieceTypeElements getPieceTypeAccess() {
		return pPieceType;
	}
	
	public ParserRule getPieceTypeRule() {
		return getPieceTypeAccess().getRule();
	}
	
	//CellState returns CellState:
	//    'Cellstate' name=EString
	//    ;
	public CellStateElements getCellStateAccess() {
		return pCellState;
	}
	
	public ParserRule getCellStateRule() {
		return getCellStateAccess().getRule();
	}
	
	//WinCondition returns WinCondition:
	//        'WinCondition' '{' winConditionElements+=WinConditionElement (winConditionElements+=WinConditionElement)* '}';
	public WinConditionElements getWinConditionAccess() {
		return pWinCondition;
	}
	
	public ParserRule getWinConditionRule() {
		return getWinConditionAccess().getRule();
	}
	
	//EInt returns ecore::EInt:
	//    '-'? INT;
	public EIntElements getEIntAccess() {
		return pEInt;
	}
	
	public ParserRule getEIntRule() {
		return getEIntAccess().getRule();
	}
	
	//EString returns ecore::EString:
	//    STRING | ID;
	public EStringElements getEStringAccess() {
		return pEString;
	}
	
	public ParserRule getEStringRule() {
		return getEStringAccess().getRule();
	}
	
	//EffectOnCell returns EffectOnCell:
	//    'EffectOnCell' name=ID '{'
	//        (
	//        'relativePosition' '('x=EInt','y=EInt')' &
	//        'newCellState'cellState=[CellState|EString]
	//        )
	//    '}';
	public EffectOnCellElements getEffectOnCellAccess() {
		return pEffectOnCell;
	}
	
	public ParserRule getEffectOnCellRule() {
		return getEffectOnCellAccess().getRule();
	}
	
	//EBoolean returns ecore::EBoolean:
	//    'true' | 'false';
	public EBooleanElements getEBooleanAccess() {
		return pEBoolean;
	}
	
	public ParserRule getEBooleanRule() {
		return getEBooleanAccess().getRule();
	}
	
	//WinConditionElement returns WinConditionElement:
	//    Line
	//;
	public WinConditionElementElements getWinConditionElementAccess() {
		return pWinConditionElement;
	}
	
	public ParserRule getWinConditionElementRule() {
		return getWinConditionElementAccess().getRule();
	}
	
	//Line returns Line:
	//    'Line'
	//    'length' length=EInt
	//    'direction' direction=Direction
	//;
	public LineElements getLineAccess() {
		return pLine;
	}
	
	public ParserRule getLineRule() {
		return getLineAccess().getRule();
	}
	
	//enum Direction:
	//    ROW | COLUMN | DIAGONAL
	//;
	public DirectionElements getDirectionAccess() {
		return eDirection;
	}
	
	public EnumRule getDirectionRule() {
		return getDirectionAccess().getRule();
	}
	
	//terminal ID: '^'?('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	}
	
	//terminal INT returns ecore::EInt: ('0'..'9')+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal STRING:
	//            '"' ( '\\' . /* 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' */ | !('\\'|'"') )* '"' |
	//            "'" ( '\\' . /* 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' */ | !('\\'|"'") )* "'"
	//        ;
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal ML_COMMENT : '/*' -> '*/';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT : '//' !('\n'|'\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS         : (' '|'\t'|'\r'|'\n')+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER: .;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
