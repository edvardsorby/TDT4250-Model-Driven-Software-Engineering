/*
 * generated by Xtext
 */
package no.ntnu.tdt4250.g07.bg.bgdl.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.CrossReference;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.UnorderedGroup;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class BoardGameDLGrammarAccess extends AbstractElementFinder.AbstractGrammarElementFinder {
	
	public class BoardGameElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "no.ntnu.tdt4250.g07.bg.bgdl.BoardGameDL.BoardGame");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cTitleKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameEStringParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cBoardSizeKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cSizeAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cSizeEIntParserRuleCall_3_0 = (RuleCall)cSizeAssignment_3.eContents().get(0);
		private final Assignment cBoardgameelementsAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cBoardgameelementsBoardGameElementParserRuleCall_4_0 = (RuleCall)cBoardgameelementsAssignment_4.eContents().get(0);
		
		//BoardGame returns BoardGame:
		//    'Title' (name = EString)
		//    'BoardSize' size=EInt
		//     (boardgameelements+=BoardGameElement)*
		//    ;
		@Override public ParserRule getRule() { return rule; }
		
		//'Title' (name = EString)
		//'BoardSize' size=EInt
		// (boardgameelements+=BoardGameElement)*
		public Group getGroup() { return cGroup; }
		
		//'Title'
		public Keyword getTitleKeyword_0() { return cTitleKeyword_0; }
		
		//(name = EString)
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//EString
		public RuleCall getNameEStringParserRuleCall_1_0() { return cNameEStringParserRuleCall_1_0; }
		
		//'BoardSize'
		public Keyword getBoardSizeKeyword_2() { return cBoardSizeKeyword_2; }
		
		//size=EInt
		public Assignment getSizeAssignment_3() { return cSizeAssignment_3; }
		
		//EInt
		public RuleCall getSizeEIntParserRuleCall_3_0() { return cSizeEIntParserRuleCall_3_0; }
		
		//(boardgameelements+=BoardGameElement)*
		public Assignment getBoardgameelementsAssignment_4() { return cBoardgameelementsAssignment_4; }
		
		//BoardGameElement
		public RuleCall getBoardgameelementsBoardGameElementParserRuleCall_4_0() { return cBoardgameelementsBoardGameElementParserRuleCall_4_0; }
	}
	public class BoardGameElementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "no.ntnu.tdt4250.g07.bg.bgdl.BoardGameDL.BoardGameElement");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cPieceTypeParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cEffectOnCellParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cValidMoveParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cCellStateParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cWinConditionParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		private final RuleCall cConditionParserRuleCall_5 = (RuleCall)cAlternatives.eContents().get(5);
		
		//BoardGameElement returns BoardGameElement:
		//    PieceType | EffectOnCell | ValidMove | CellState | WinCondition | Condition
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//PieceType | EffectOnCell | ValidMove | CellState | WinCondition | Condition
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//PieceType
		public RuleCall getPieceTypeParserRuleCall_0() { return cPieceTypeParserRuleCall_0; }
		
		//EffectOnCell
		public RuleCall getEffectOnCellParserRuleCall_1() { return cEffectOnCellParserRuleCall_1; }
		
		//ValidMove
		public RuleCall getValidMoveParserRuleCall_2() { return cValidMoveParserRuleCall_2; }
		
		//CellState
		public RuleCall getCellStateParserRuleCall_3() { return cCellStateParserRuleCall_3; }
		
		//WinCondition
		public RuleCall getWinConditionParserRuleCall_4() { return cWinConditionParserRuleCall_4; }
		
		//Condition
		public RuleCall getConditionParserRuleCall_5() { return cConditionParserRuleCall_5; }
	}
	public class PieceTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "no.ntnu.tdt4250.g07.bg.bgdl.BoardGameDL.PieceType");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cPieceTypeKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameEStringParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cSymbolKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cSymbolAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cSymbolEStringParserRuleCall_4_0 = (RuleCall)cSymbolAssignment_4.eContents().get(0);
		private final Keyword cValidMovesKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Keyword cLeftSquareBracketKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Assignment cValidmovesAssignment_7 = (Assignment)cGroup.eContents().get(7);
		private final CrossReference cValidmovesValidMoveCrossReference_7_0 = (CrossReference)cValidmovesAssignment_7.eContents().get(0);
		private final RuleCall cValidmovesValidMoveEStringParserRuleCall_7_0_1 = (RuleCall)cValidmovesValidMoveCrossReference_7_0.eContents().get(1);
		private final Group cGroup_8 = (Group)cGroup.eContents().get(8);
		private final Keyword cCommaKeyword_8_0 = (Keyword)cGroup_8.eContents().get(0);
		private final Assignment cValidmovesAssignment_8_1 = (Assignment)cGroup_8.eContents().get(1);
		private final CrossReference cValidmovesValidMoveCrossReference_8_1_0 = (CrossReference)cValidmovesAssignment_8_1.eContents().get(0);
		private final RuleCall cValidmovesValidMoveEStringParserRuleCall_8_1_0_1 = (RuleCall)cValidmovesValidMoveCrossReference_8_1_0.eContents().get(1);
		private final Keyword cRightSquareBracketKeyword_9 = (Keyword)cGroup.eContents().get(9);
		private final Group cGroup_10 = (Group)cGroup.eContents().get(10);
		private final Keyword cEffectsOnCellKeyword_10_0 = (Keyword)cGroup_10.eContents().get(0);
		private final Keyword cLeftSquareBracketKeyword_10_1 = (Keyword)cGroup_10.eContents().get(1);
		private final Assignment cEffectsoncellAssignment_10_2 = (Assignment)cGroup_10.eContents().get(2);
		private final CrossReference cEffectsoncellEffectOnCellCrossReference_10_2_0 = (CrossReference)cEffectsoncellAssignment_10_2.eContents().get(0);
		private final RuleCall cEffectsoncellEffectOnCellEStringParserRuleCall_10_2_0_1 = (RuleCall)cEffectsoncellEffectOnCellCrossReference_10_2_0.eContents().get(1);
		private final Group cGroup_10_3 = (Group)cGroup_10.eContents().get(3);
		private final Keyword cCommaKeyword_10_3_0 = (Keyword)cGroup_10_3.eContents().get(0);
		private final Assignment cEffectsoncellAssignment_10_3_1 = (Assignment)cGroup_10_3.eContents().get(1);
		private final CrossReference cEffectsoncellEffectOnCellCrossReference_10_3_1_0 = (CrossReference)cEffectsoncellAssignment_10_3_1.eContents().get(0);
		private final RuleCall cEffectsoncellEffectOnCellEStringParserRuleCall_10_3_1_0_1 = (RuleCall)cEffectsoncellEffectOnCellCrossReference_10_3_1_0.eContents().get(1);
		private final Keyword cRightSquareBracketKeyword_10_4 = (Keyword)cGroup_10.eContents().get(4);
		private final Keyword cRightCurlyBracketKeyword_11 = (Keyword)cGroup.eContents().get(11);
		
		//PieceType returns PieceType:
		//    'PieceType'
		//    name=EString '{'
		//        'Symbol' symbol=EString
		//        'ValidMoves' '[' validmoves+= [ValidMove|EString] ( "," validmoves+=[ValidMove | EString])*']'
		//        ('EffectsOnCell' '[' effectsoncell+=[EffectOnCell|EString] ( "," effectsoncell+=[EffectOnCell|EString])* ']' )?
		//    '}';
		@Override public ParserRule getRule() { return rule; }
		
		//'PieceType'
		//name=EString '{'
		//    'Symbol' symbol=EString
		//    'ValidMoves' '[' validmoves+= [ValidMove|EString] ( "," validmoves+=[ValidMove | EString])*']'
		//    ('EffectsOnCell' '[' effectsoncell+=[EffectOnCell|EString] ( "," effectsoncell+=[EffectOnCell|EString])* ']' )?
		//'}'
		public Group getGroup() { return cGroup; }
		
		//'PieceType'
		public Keyword getPieceTypeKeyword_0() { return cPieceTypeKeyword_0; }
		
		//name=EString
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//EString
		public RuleCall getNameEStringParserRuleCall_1_0() { return cNameEStringParserRuleCall_1_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }
		
		//'Symbol'
		public Keyword getSymbolKeyword_3() { return cSymbolKeyword_3; }
		
		//symbol=EString
		public Assignment getSymbolAssignment_4() { return cSymbolAssignment_4; }
		
		//EString
		public RuleCall getSymbolEStringParserRuleCall_4_0() { return cSymbolEStringParserRuleCall_4_0; }
		
		//'ValidMoves'
		public Keyword getValidMovesKeyword_5() { return cValidMovesKeyword_5; }
		
		//'['
		public Keyword getLeftSquareBracketKeyword_6() { return cLeftSquareBracketKeyword_6; }
		
		//validmoves+= [ValidMove|EString]
		public Assignment getValidmovesAssignment_7() { return cValidmovesAssignment_7; }
		
		//[ValidMove|EString]
		public CrossReference getValidmovesValidMoveCrossReference_7_0() { return cValidmovesValidMoveCrossReference_7_0; }
		
		//EString
		public RuleCall getValidmovesValidMoveEStringParserRuleCall_7_0_1() { return cValidmovesValidMoveEStringParserRuleCall_7_0_1; }
		
		//( "," validmoves+=[ValidMove | EString])*
		public Group getGroup_8() { return cGroup_8; }
		
		//","
		public Keyword getCommaKeyword_8_0() { return cCommaKeyword_8_0; }
		
		//validmoves+=[ValidMove | EString]
		public Assignment getValidmovesAssignment_8_1() { return cValidmovesAssignment_8_1; }
		
		//[ValidMove | EString]
		public CrossReference getValidmovesValidMoveCrossReference_8_1_0() { return cValidmovesValidMoveCrossReference_8_1_0; }
		
		//EString
		public RuleCall getValidmovesValidMoveEStringParserRuleCall_8_1_0_1() { return cValidmovesValidMoveEStringParserRuleCall_8_1_0_1; }
		
		//']'
		public Keyword getRightSquareBracketKeyword_9() { return cRightSquareBracketKeyword_9; }
		
		//('EffectsOnCell' '[' effectsoncell+=[EffectOnCell|EString] ( "," effectsoncell+=[EffectOnCell|EString])* ']' )?
		public Group getGroup_10() { return cGroup_10; }
		
		//'EffectsOnCell'
		public Keyword getEffectsOnCellKeyword_10_0() { return cEffectsOnCellKeyword_10_0; }
		
		//'['
		public Keyword getLeftSquareBracketKeyword_10_1() { return cLeftSquareBracketKeyword_10_1; }
		
		//effectsoncell+=[EffectOnCell|EString]
		public Assignment getEffectsoncellAssignment_10_2() { return cEffectsoncellAssignment_10_2; }
		
		//[EffectOnCell|EString]
		public CrossReference getEffectsoncellEffectOnCellCrossReference_10_2_0() { return cEffectsoncellEffectOnCellCrossReference_10_2_0; }
		
		//EString
		public RuleCall getEffectsoncellEffectOnCellEStringParserRuleCall_10_2_0_1() { return cEffectsoncellEffectOnCellEStringParserRuleCall_10_2_0_1; }
		
		//( "," effectsoncell+=[EffectOnCell|EString])*
		public Group getGroup_10_3() { return cGroup_10_3; }
		
		//","
		public Keyword getCommaKeyword_10_3_0() { return cCommaKeyword_10_3_0; }
		
		//effectsoncell+=[EffectOnCell|EString]
		public Assignment getEffectsoncellAssignment_10_3_1() { return cEffectsoncellAssignment_10_3_1; }
		
		//[EffectOnCell|EString]
		public CrossReference getEffectsoncellEffectOnCellCrossReference_10_3_1_0() { return cEffectsoncellEffectOnCellCrossReference_10_3_1_0; }
		
		//EString
		public RuleCall getEffectsoncellEffectOnCellEStringParserRuleCall_10_3_1_0_1() { return cEffectsoncellEffectOnCellEStringParserRuleCall_10_3_1_0_1; }
		
		//']'
		public Keyword getRightSquareBracketKeyword_10_4() { return cRightSquareBracketKeyword_10_4; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_11() { return cRightCurlyBracketKeyword_11; }
	}
	public class CellStateElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "no.ntnu.tdt4250.g07.bg.bgdl.BoardGameDL.CellState");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cCellstateKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameEStringParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		
		//CellState returns CellState:
		//    'Cellstate' name=EString
		//    ;
		@Override public ParserRule getRule() { return rule; }
		
		//'Cellstate' name=EString
		public Group getGroup() { return cGroup; }
		
		//'Cellstate'
		public Keyword getCellstateKeyword_0() { return cCellstateKeyword_0; }
		
		//name=EString
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//EString
		public RuleCall getNameEStringParserRuleCall_1_0() { return cNameEStringParserRuleCall_1_0; }
	}
	public class WinConditionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "no.ntnu.tdt4250.g07.bg.bgdl.BoardGameDL.WinCondition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cWinConditionKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cInarowAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cInarowInARowParserRuleCall_1_0 = (RuleCall)cInarowAssignment_1.eContents().get(0);
		
		//WinCondition returns WinCondition:
		//        'WinCondition' inarow=InARow;
		@Override public ParserRule getRule() { return rule; }
		
		//'WinCondition' inarow=InARow
		public Group getGroup() { return cGroup; }
		
		//'WinCondition'
		public Keyword getWinConditionKeyword_0() { return cWinConditionKeyword_0; }
		
		//inarow=InARow
		public Assignment getInarowAssignment_1() { return cInarowAssignment_1; }
		
		//InARow
		public RuleCall getInarowInARowParserRuleCall_1_0() { return cInarowInARowParserRuleCall_1_0; }
	}
	public class EIntElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "no.ntnu.tdt4250.g07.bg.bgdl.BoardGameDL.EInt");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cHyphenMinusKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cINTTerminalRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		
		//EInt returns ecore::EInt:
		//    '-'? INT;
		@Override public ParserRule getRule() { return rule; }
		
		//'-'? INT
		public Group getGroup() { return cGroup; }
		
		//'-'?
		public Keyword getHyphenMinusKeyword_0() { return cHyphenMinusKeyword_0; }
		
		//INT
		public RuleCall getINTTerminalRuleCall_1() { return cINTTerminalRuleCall_1; }
	}
	public class EStringElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "no.ntnu.tdt4250.g07.bg.bgdl.BoardGameDL.EString");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cSTRINGTerminalRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cIDTerminalRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//EString returns ecore::EString:
		//    STRING | ID;
		@Override public ParserRule getRule() { return rule; }
		
		//STRING | ID
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//STRING
		public RuleCall getSTRINGTerminalRuleCall_0() { return cSTRINGTerminalRuleCall_0; }
		
		//ID
		public RuleCall getIDTerminalRuleCall_1() { return cIDTerminalRuleCall_1; }
	}
	public class ValidMoveElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "no.ntnu.tdt4250.g07.bg.bgdl.BoardGameDL.ValidMove");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cValidMoveKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cPlaceAnywhereAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final Keyword cPlaceAnywherePlaceAnywhereKeyword_3_0 = (Keyword)cPlaceAnywhereAssignment_3.eContents().get(0);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cValidKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Keyword cIfKeyword_4_1 = (Keyword)cGroup_4.eContents().get(1);
		private final Assignment cConditionsAssignment_4_2 = (Assignment)cGroup_4.eContents().get(2);
		private final CrossReference cConditionsConditionCrossReference_4_2_0 = (CrossReference)cConditionsAssignment_4_2.eContents().get(0);
		private final RuleCall cConditionsConditionEStringParserRuleCall_4_2_0_1 = (RuleCall)cConditionsConditionCrossReference_4_2_0.eContents().get(1);
		private final Group cGroup_4_3 = (Group)cGroup_4.eContents().get(3);
		private final Keyword cAndKeyword_4_3_0 = (Keyword)cGroup_4_3.eContents().get(0);
		private final Assignment cConditionsAssignment_4_3_1 = (Assignment)cGroup_4_3.eContents().get(1);
		private final CrossReference cConditionsConditionCrossReference_4_3_1_0 = (CrossReference)cConditionsAssignment_4_3_1.eContents().get(0);
		private final RuleCall cConditionsConditionEStringParserRuleCall_4_3_1_0_1 = (RuleCall)cConditionsConditionCrossReference_4_3_1_0.eContents().get(1);
		private final Keyword cRightCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//ValidMove returns ValidMove:
		//    'ValidMove' name=ID '{'
		//        placeAnywhere?='placeAnywhere'
		//        ('valid' 'if' conditions+=[Condition|EString] ( "and" conditions+=[Condition|EString])* )?
		//    '}';
		@Override public ParserRule getRule() { return rule; }
		
		//'ValidMove' name=ID '{'
		//    placeAnywhere?='placeAnywhere'
		//    ('valid' 'if' conditions+=[Condition|EString] ( "and" conditions+=[Condition|EString])* )?
		//'}'
		public Group getGroup() { return cGroup; }
		
		//'ValidMove'
		public Keyword getValidMoveKeyword_0() { return cValidMoveKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }
		
		//placeAnywhere?='placeAnywhere'
		public Assignment getPlaceAnywhereAssignment_3() { return cPlaceAnywhereAssignment_3; }
		
		//'placeAnywhere'
		public Keyword getPlaceAnywherePlaceAnywhereKeyword_3_0() { return cPlaceAnywherePlaceAnywhereKeyword_3_0; }
		
		//('valid' 'if' conditions+=[Condition|EString] ( "and" conditions+=[Condition|EString])* )?
		public Group getGroup_4() { return cGroup_4; }
		
		//'valid'
		public Keyword getValidKeyword_4_0() { return cValidKeyword_4_0; }
		
		//'if'
		public Keyword getIfKeyword_4_1() { return cIfKeyword_4_1; }
		
		//conditions+=[Condition|EString]
		public Assignment getConditionsAssignment_4_2() { return cConditionsAssignment_4_2; }
		
		//[Condition|EString]
		public CrossReference getConditionsConditionCrossReference_4_2_0() { return cConditionsConditionCrossReference_4_2_0; }
		
		//EString
		public RuleCall getConditionsConditionEStringParserRuleCall_4_2_0_1() { return cConditionsConditionEStringParserRuleCall_4_2_0_1; }
		
		//( "and" conditions+=[Condition|EString])*
		public Group getGroup_4_3() { return cGroup_4_3; }
		
		//"and"
		public Keyword getAndKeyword_4_3_0() { return cAndKeyword_4_3_0; }
		
		//conditions+=[Condition|EString]
		public Assignment getConditionsAssignment_4_3_1() { return cConditionsAssignment_4_3_1; }
		
		//[Condition|EString]
		public CrossReference getConditionsConditionCrossReference_4_3_1_0() { return cConditionsConditionCrossReference_4_3_1_0; }
		
		//EString
		public RuleCall getConditionsConditionEStringParserRuleCall_4_3_1_0_1() { return cConditionsConditionEStringParserRuleCall_4_3_1_0_1; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_5() { return cRightCurlyBracketKeyword_5; }
	}
	public class EffectOnCellElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "no.ntnu.tdt4250.g07.bg.bgdl.BoardGameDL.EffectOnCell");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cEffectOnCellKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final UnorderedGroup cUnorderedGroup_3 = (UnorderedGroup)cGroup.eContents().get(3);
		private final Group cGroup_3_0 = (Group)cUnorderedGroup_3.eContents().get(0);
		private final Keyword cRelativePositionKeyword_3_0_0 = (Keyword)cGroup_3_0.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_3_0_1 = (Keyword)cGroup_3_0.eContents().get(1);
		private final Assignment cXAssignment_3_0_2 = (Assignment)cGroup_3_0.eContents().get(2);
		private final RuleCall cXEIntParserRuleCall_3_0_2_0 = (RuleCall)cXAssignment_3_0_2.eContents().get(0);
		private final Keyword cCommaKeyword_3_0_3 = (Keyword)cGroup_3_0.eContents().get(3);
		private final Assignment cYAssignment_3_0_4 = (Assignment)cGroup_3_0.eContents().get(4);
		private final RuleCall cYEIntParserRuleCall_3_0_4_0 = (RuleCall)cYAssignment_3_0_4.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3_0_5 = (Keyword)cGroup_3_0.eContents().get(5);
		private final Group cGroup_3_1 = (Group)cUnorderedGroup_3.eContents().get(1);
		private final Keyword cNewCellStateKeyword_3_1_0 = (Keyword)cGroup_3_1.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_3_1_1 = (Keyword)cGroup_3_1.eContents().get(1);
		private final Assignment cCellstateAssignment_3_1_2 = (Assignment)cGroup_3_1.eContents().get(2);
		private final CrossReference cCellstateCellStateCrossReference_3_1_2_0 = (CrossReference)cCellstateAssignment_3_1_2.eContents().get(0);
		private final RuleCall cCellstateCellStateEStringParserRuleCall_3_1_2_0_1 = (RuleCall)cCellstateCellStateCrossReference_3_1_2_0.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_3_1_3 = (Keyword)cGroup_3_1.eContents().get(3);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//EffectOnCell returns EffectOnCell:
		//    'EffectOnCell' name=ID '{'
		//        (
		//        'relativePosition' '('x=EInt','y=EInt')' &
		//        'newCellState''('cellstate=[CellState|EString]')'
		//        )
		//    '}';
		@Override public ParserRule getRule() { return rule; }
		
		//'EffectOnCell' name=ID '{'
		//    (
		//    'relativePosition' '('x=EInt','y=EInt')' &
		//    'newCellState''('cellstate=[CellState|EString]')'
		//    )
		//'}'
		public Group getGroup() { return cGroup; }
		
		//'EffectOnCell'
		public Keyword getEffectOnCellKeyword_0() { return cEffectOnCellKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }
		
		//(
		//'relativePosition' '('x=EInt','y=EInt')' &
		//'newCellState''('cellstate=[CellState|EString]')'
		//)
		public UnorderedGroup getUnorderedGroup_3() { return cUnorderedGroup_3; }
		
		//'relativePosition' '('x=EInt','y=EInt')'
		public Group getGroup_3_0() { return cGroup_3_0; }
		
		//'relativePosition'
		public Keyword getRelativePositionKeyword_3_0_0() { return cRelativePositionKeyword_3_0_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_3_0_1() { return cLeftParenthesisKeyword_3_0_1; }
		
		//x=EInt
		public Assignment getXAssignment_3_0_2() { return cXAssignment_3_0_2; }
		
		//EInt
		public RuleCall getXEIntParserRuleCall_3_0_2_0() { return cXEIntParserRuleCall_3_0_2_0; }
		
		//','
		public Keyword getCommaKeyword_3_0_3() { return cCommaKeyword_3_0_3; }
		
		//y=EInt
		public Assignment getYAssignment_3_0_4() { return cYAssignment_3_0_4; }
		
		//EInt
		public RuleCall getYEIntParserRuleCall_3_0_4_0() { return cYEIntParserRuleCall_3_0_4_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_3_0_5() { return cRightParenthesisKeyword_3_0_5; }
		
		//'newCellState''('cellstate=[CellState|EString]')'
		public Group getGroup_3_1() { return cGroup_3_1; }
		
		//'newCellState'
		public Keyword getNewCellStateKeyword_3_1_0() { return cNewCellStateKeyword_3_1_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_3_1_1() { return cLeftParenthesisKeyword_3_1_1; }
		
		//cellstate=[CellState|EString]
		public Assignment getCellstateAssignment_3_1_2() { return cCellstateAssignment_3_1_2; }
		
		//[CellState|EString]
		public CrossReference getCellstateCellStateCrossReference_3_1_2_0() { return cCellstateCellStateCrossReference_3_1_2_0; }
		
		//EString
		public RuleCall getCellstateCellStateEStringParserRuleCall_3_1_2_0_1() { return cCellstateCellStateEStringParserRuleCall_3_1_2_0_1; }
		
		//')'
		public Keyword getRightParenthesisKeyword_3_1_3() { return cRightParenthesisKeyword_3_1_3; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
	}
	public class ConditionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "no.ntnu.tdt4250.g07.bg.bgdl.BoardGameDL.Condition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cConditionKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Assignment cCellstateAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final CrossReference cCellstateCellStateCrossReference_2_0 = (CrossReference)cCellstateAssignment_2.eContents().get(0);
		private final RuleCall cCellstateCellStateEStringParserRuleCall_2_0_1 = (RuleCall)cCellstateCellStateCrossReference_2_0.eContents().get(1);
		
		//Condition returns Condition:
		//    'Condition' name=ID cellstate=[CellState|EString];
		@Override public ParserRule getRule() { return rule; }
		
		//'Condition' name=ID cellstate=[CellState|EString]
		public Group getGroup() { return cGroup; }
		
		//'Condition'
		public Keyword getConditionKeyword_0() { return cConditionKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//cellstate=[CellState|EString]
		public Assignment getCellstateAssignment_2() { return cCellstateAssignment_2; }
		
		//[CellState|EString]
		public CrossReference getCellstateCellStateCrossReference_2_0() { return cCellstateCellStateCrossReference_2_0; }
		
		//EString
		public RuleCall getCellstateCellStateEStringParserRuleCall_2_0_1() { return cCellstateCellStateEStringParserRuleCall_2_0_1; }
	}
	public class EBooleanElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "no.ntnu.tdt4250.g07.bg.bgdl.BoardGameDL.EBoolean");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cTrueKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cFalseKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		
		//EBoolean returns ecore::EBoolean:
		//    'true' | 'false';
		@Override public ParserRule getRule() { return rule; }
		
		//'true' | 'false'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//'true'
		public Keyword getTrueKeyword_0() { return cTrueKeyword_0; }
		
		//'false'
		public Keyword getFalseKeyword_1() { return cFalseKeyword_1; }
	}
	public class InARowElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "no.ntnu.tdt4250.g07.bg.bgdl.BoardGameDL.InARow");
		private final UnorderedGroup cUnorderedGroup = (UnorderedGroup)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cUnorderedGroup.eContents().get(0);
		private final Keyword cCountKeyword_0_0 = (Keyword)cGroup_0.eContents().get(0);
		private final Assignment cCountAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final RuleCall cCountEIntParserRuleCall_0_1_0 = (RuleCall)cCountAssignment_0_1.eContents().get(0);
		private final Assignment cHorizontalAssignment_1 = (Assignment)cUnorderedGroup.eContents().get(1);
		private final Keyword cHorizontalHorizontalKeyword_1_0 = (Keyword)cHorizontalAssignment_1.eContents().get(0);
		private final Assignment cVerticalAssignment_2 = (Assignment)cUnorderedGroup.eContents().get(2);
		private final Keyword cVerticalVerticalKeyword_2_0 = (Keyword)cVerticalAssignment_2.eContents().get(0);
		private final Assignment cDiagonalAssignment_3 = (Assignment)cUnorderedGroup.eContents().get(3);
		private final Keyword cDiagonalDiagonalKeyword_3_0 = (Keyword)cDiagonalAssignment_3.eContents().get(0);
		
		//InARow returns InARow:
		//    (
		//    'count' count=EInt &
		//    horizontal?='horizontal' &
		//    vertical?='vertical' &
		//    diagonal?='diagonal'
		//    )
		//    ;
		@Override public ParserRule getRule() { return rule; }
		
		//(
		//'count' count=EInt &
		//horizontal?='horizontal' &
		//vertical?='vertical' &
		//diagonal?='diagonal'
		//)
		public UnorderedGroup getUnorderedGroup() { return cUnorderedGroup; }
		
		//'count' count=EInt
		public Group getGroup_0() { return cGroup_0; }
		
		//'count'
		public Keyword getCountKeyword_0_0() { return cCountKeyword_0_0; }
		
		//count=EInt
		public Assignment getCountAssignment_0_1() { return cCountAssignment_0_1; }
		
		//EInt
		public RuleCall getCountEIntParserRuleCall_0_1_0() { return cCountEIntParserRuleCall_0_1_0; }
		
		//horizontal?='horizontal'
		public Assignment getHorizontalAssignment_1() { return cHorizontalAssignment_1; }
		
		//'horizontal'
		public Keyword getHorizontalHorizontalKeyword_1_0() { return cHorizontalHorizontalKeyword_1_0; }
		
		//vertical?='vertical'
		public Assignment getVerticalAssignment_2() { return cVerticalAssignment_2; }
		
		//'vertical'
		public Keyword getVerticalVerticalKeyword_2_0() { return cVerticalVerticalKeyword_2_0; }
		
		//diagonal?='diagonal'
		public Assignment getDiagonalAssignment_3() { return cDiagonalAssignment_3; }
		
		//'diagonal'
		public Keyword getDiagonalDiagonalKeyword_3_0() { return cDiagonalDiagonalKeyword_3_0; }
	}
	
	
	private final BoardGameElements pBoardGame;
	private final BoardGameElementElements pBoardGameElement;
	private final PieceTypeElements pPieceType;
	private final CellStateElements pCellState;
	private final WinConditionElements pWinCondition;
	private final EIntElements pEInt;
	private final EStringElements pEString;
	private final ValidMoveElements pValidMove;
	private final EffectOnCellElements pEffectOnCell;
	private final ConditionElements pCondition;
	private final EBooleanElements pEBoolean;
	private final InARowElements pInARow;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public BoardGameDLGrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pBoardGame = new BoardGameElements();
		this.pBoardGameElement = new BoardGameElementElements();
		this.pPieceType = new PieceTypeElements();
		this.pCellState = new CellStateElements();
		this.pWinCondition = new WinConditionElements();
		this.pEInt = new EIntElements();
		this.pEString = new EStringElements();
		this.pValidMove = new ValidMoveElements();
		this.pEffectOnCell = new EffectOnCellElements();
		this.pCondition = new ConditionElements();
		this.pEBoolean = new EBooleanElements();
		this.pInARow = new InARowElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("no.ntnu.tdt4250.g07.bg.bgdl.BoardGameDL".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//BoardGame returns BoardGame:
	//    'Title' (name = EString)
	//    'BoardSize' size=EInt
	//     (boardgameelements+=BoardGameElement)*
	//    ;
	public BoardGameElements getBoardGameAccess() {
		return pBoardGame;
	}
	
	public ParserRule getBoardGameRule() {
		return getBoardGameAccess().getRule();
	}
	
	//BoardGameElement returns BoardGameElement:
	//    PieceType | EffectOnCell | ValidMove | CellState | WinCondition | Condition
	//;
	public BoardGameElementElements getBoardGameElementAccess() {
		return pBoardGameElement;
	}
	
	public ParserRule getBoardGameElementRule() {
		return getBoardGameElementAccess().getRule();
	}
	
	//PieceType returns PieceType:
	//    'PieceType'
	//    name=EString '{'
	//        'Symbol' symbol=EString
	//        'ValidMoves' '[' validmoves+= [ValidMove|EString] ( "," validmoves+=[ValidMove | EString])*']'
	//        ('EffectsOnCell' '[' effectsoncell+=[EffectOnCell|EString] ( "," effectsoncell+=[EffectOnCell|EString])* ']' )?
	//    '}';
	public PieceTypeElements getPieceTypeAccess() {
		return pPieceType;
	}
	
	public ParserRule getPieceTypeRule() {
		return getPieceTypeAccess().getRule();
	}
	
	//CellState returns CellState:
	//    'Cellstate' name=EString
	//    ;
	public CellStateElements getCellStateAccess() {
		return pCellState;
	}
	
	public ParserRule getCellStateRule() {
		return getCellStateAccess().getRule();
	}
	
	//WinCondition returns WinCondition:
	//        'WinCondition' inarow=InARow;
	public WinConditionElements getWinConditionAccess() {
		return pWinCondition;
	}
	
	public ParserRule getWinConditionRule() {
		return getWinConditionAccess().getRule();
	}
	
	//EInt returns ecore::EInt:
	//    '-'? INT;
	public EIntElements getEIntAccess() {
		return pEInt;
	}
	
	public ParserRule getEIntRule() {
		return getEIntAccess().getRule();
	}
	
	//EString returns ecore::EString:
	//    STRING | ID;
	public EStringElements getEStringAccess() {
		return pEString;
	}
	
	public ParserRule getEStringRule() {
		return getEStringAccess().getRule();
	}
	
	//ValidMove returns ValidMove:
	//    'ValidMove' name=ID '{'
	//        placeAnywhere?='placeAnywhere'
	//        ('valid' 'if' conditions+=[Condition|EString] ( "and" conditions+=[Condition|EString])* )?
	//    '}';
	public ValidMoveElements getValidMoveAccess() {
		return pValidMove;
	}
	
	public ParserRule getValidMoveRule() {
		return getValidMoveAccess().getRule();
	}
	
	//EffectOnCell returns EffectOnCell:
	//    'EffectOnCell' name=ID '{'
	//        (
	//        'relativePosition' '('x=EInt','y=EInt')' &
	//        'newCellState''('cellstate=[CellState|EString]')'
	//        )
	//    '}';
	public EffectOnCellElements getEffectOnCellAccess() {
		return pEffectOnCell;
	}
	
	public ParserRule getEffectOnCellRule() {
		return getEffectOnCellAccess().getRule();
	}
	
	//Condition returns Condition:
	//    'Condition' name=ID cellstate=[CellState|EString];
	public ConditionElements getConditionAccess() {
		return pCondition;
	}
	
	public ParserRule getConditionRule() {
		return getConditionAccess().getRule();
	}
	
	//EBoolean returns ecore::EBoolean:
	//    'true' | 'false';
	public EBooleanElements getEBooleanAccess() {
		return pEBoolean;
	}
	
	public ParserRule getEBooleanRule() {
		return getEBooleanAccess().getRule();
	}
	
	//InARow returns InARow:
	//    (
	//    'count' count=EInt &
	//    horizontal?='horizontal' &
	//    vertical?='vertical' &
	//    diagonal?='diagonal'
	//    )
	//    ;
	public InARowElements getInARowAccess() {
		return pInARow;
	}
	
	public ParserRule getInARowRule() {
		return getInARowAccess().getRule();
	}
	
	//terminal ID: '^'?('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	}
	
	//terminal INT returns ecore::EInt: ('0'..'9')+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal STRING:
	//            '"' ( '\\' . /* 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' */ | !('\\'|'"') )* '"' |
	//            "'" ( '\\' . /* 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' */ | !('\\'|"'") )* "'"
	//        ;
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal ML_COMMENT : '/*' -> '*/';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT : '//' !('\n'|'\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS         : (' '|'\t'|'\r'|'\n')+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER: .;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
