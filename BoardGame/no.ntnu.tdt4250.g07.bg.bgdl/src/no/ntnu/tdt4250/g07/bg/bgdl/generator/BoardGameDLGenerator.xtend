/*
 * generated by Xtext 2.35.0
 */
package no.ntnu.tdt4250.g07.bg.bgdl.generator

import java.util.Collection
import no.ntnu.tdt4250.g07.bg.BoardGame
import no.ntnu.tdt4250.g07.bg.BoardGameElement
import no.ntnu.tdt4250.g07.bg.Condition
import no.ntnu.tdt4250.g07.bg.PieceType
import no.ntnu.tdt4250.g07.bg.ValidMove
import org.eclipse.emf.ecore.EObject
import org.eclipse.emf.ecore.EStructuralFeature
import org.eclipse.emf.ecore.resource.Resource
import org.eclipse.xtext.generator.AbstractGenerator
import org.eclipse.xtext.generator.IFileSystemAccess2
import org.eclipse.xtext.generator.IGeneratorContext

/**
 * Generates code from your model files on save.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#code-generation
 */

class BoardGameDLGenerator extends AbstractGenerator {

    override void doGenerate(Resource resource, IFileSystemAccess2 fsa, IGeneratorContext context) {
        val boardGame = resource.allContents.filter(BoardGame).head
        if (boardGame !== null) {
            fsa.generateFile(boardGame.name+".js", generateJS(boardGame))
            
        }
    }

    def String generateJS(BoardGame boardGame) {
        '''
        const boardGame = {
            size: «boardGame.size»,
            elements: {
           		«boardGame.boardGameElements.groupBy[eClass.name].entrySet.map[
                       key + ': [' + value.map[generateElementJS(it)].join(",") + ']'
                   ].join(",\n")»
            }
        };

        export default boardGame;
        '''
        
        /**
         *   piecetypes: [
                «boardGame.piecetypes.map[generatePieceType(it)].join(",\n")»
            ],
            cellstates: [
                «boardGame.cellstates.map[CellState.].join(", ")»
            ],
            winConditions: [
                «boardGame.winConditions.map[generateWinCondition(it)].join(",\n")»
            ]
         */
    }
    
    def String generateElementJS(BoardGameElement element) {
    '''{«element.eClass.EAllStructuralFeatures.map[serializeFeature(it, element)].join(",")»}'''
}

def String serializeFeature(EStructuralFeature feature, EObject element) {
    val value = element.eGet(feature)
    '''"«feature.name»": «serializeValue(value)»'''
}

def String serializeValue(Object value) {
    if (value instanceof String || value instanceof Enum) 
        return '"' + value + '"'
    else if (value instanceof Boolean)
        return value.toString
    else if (value instanceof Collection<?>)
        return '[' + value.map[serializeValue(it)].join(", \n") + ']'
    else if (value instanceof EObject)
        return '{ ' + value.eClass.EAllStructuralFeatures.map[serializeFeature(it, value)].join(", ") + ' }'
    else
        return value.toString
}

    def String generatePieceType(PieceType pieceType) {
        '''{name: "«pieceType.name»",
            symbol: "«pieceType.symbol»",
            validmoves: [«pieceType.validMoves.map[generateValidMove(it)].join(",\n")»]}'''
    }

    def String generateValidMove(ValidMove validMove) {
        '''
        {placeAnywhere: «validMove.placeAnywhere»,
         conditions: [«validMove.conditions.map[generateCondition(it)].join(",\n")»]}
        '''
    }

    def String generateCondition(Condition condition) {
        '''
        {cellstate: "«condition.cellState.name»"}
        '''
    }
/**
    def String generateWinCondition(WinCondition winCondition) {
        '''
        {
            inarow: {
                diagonal: «winCondition.winConditionElements .diagonal»,
                horizontal: «winCondition.inarow.horizontal»,
                vertical: «winCondition.inarow.vertical»,
                count: «winCondition.inarow.count»
            }
        }
        '''
    }
    *  */
}

