/**
 * generated by Xtext 2.35.0
 */
package no.ntnu.tdt4250.g07.bg.bgdl.generator;

import com.google.common.collect.Iterators;
import java.util.Collection;
import java.util.List;
import java.util.Map;
import no.ntnu.tdt4250.g07.bg.BoardGame;
import no.ntnu.tdt4250.g07.bg.BoardGameElement;
import no.ntnu.tdt4250.g07.bg.Condition;
import no.ntnu.tdt4250.g07.bg.PieceType;
import no.ntnu.tdt4250.g07.bg.ValidMove;
import no.ntnu.tdt4250.g07.bg.WinCondition;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EStructuralFeature;
import org.eclipse.emf.ecore.resource.Resource;
import org.eclipse.xtend2.lib.StringConcatenation;
import org.eclipse.xtext.generator.AbstractGenerator;
import org.eclipse.xtext.generator.IFileSystemAccess2;
import org.eclipse.xtext.generator.IGeneratorContext;
import org.eclipse.xtext.xbase.lib.Functions.Function1;
import org.eclipse.xtext.xbase.lib.IterableExtensions;
import org.eclipse.xtext.xbase.lib.IteratorExtensions;
import org.eclipse.xtext.xbase.lib.ListExtensions;

/**
 * Generates code from your model files on save.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#code-generation
 */
@SuppressWarnings("all")
public class BoardGameDLGenerator extends AbstractGenerator {
  @Override
  public void doGenerate(final Resource resource, final IFileSystemAccess2 fsa, final IGeneratorContext context) {
    final BoardGame boardGame = IteratorExtensions.<BoardGame>head(Iterators.<BoardGame>filter(resource.getAllContents(), BoardGame.class));
    if ((boardGame != null)) {
      fsa.generateFile("boardGame.js", this.generateJS(boardGame));
    }
  }

  public String generateJS(final BoardGame boardGame) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("const boardGame = {");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("size: ");
    int _size = boardGame.getSize();
    _builder.append(_size, "    ");
    _builder.append(",");
    _builder.newLineIfNotEmpty();
    _builder.append("    ");
    _builder.append("elements: {");
    _builder.newLine();
    _builder.append("   ");
    final Function1<BoardGameElement, String> _function = (BoardGameElement it) -> {
      return it.eClass().getName();
    };
    final Function1<Map.Entry<String, List<BoardGameElement>>, String> _function_1 = (Map.Entry<String, List<BoardGameElement>> it) -> {
      String _key = it.getKey();
      String _plus = (_key + ": [");
      final Function1<BoardGameElement, String> _function_2 = (BoardGameElement it_1) -> {
        return this.generateElementJS(it_1);
      };
      String _join = IterableExtensions.join(ListExtensions.<BoardGameElement, String>map(it.getValue(), _function_2), ",\n");
      String _plus_1 = (_plus + _join);
      return (_plus_1 + "]");
    };
    String _join = IterableExtensions.join(IterableExtensions.<Map.Entry<String, List<BoardGameElement>>, String>map(IterableExtensions.<String, BoardGameElement>groupBy(boardGame.getBoardgameelements(), _function).entrySet(), _function_1), ",\n");
    _builder.append(_join, "   ");
    _builder.newLineIfNotEmpty();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("};");
    _builder.newLine();
    _builder.newLine();
    _builder.append("export default boardGame;");
    _builder.newLine();
    return _builder.toString();
  }

  public String generateElementJS(final BoardGameElement element) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("{");
    _builder.newLine();
    _builder.append("    ");
    final Function1<EStructuralFeature, String> _function = (EStructuralFeature it) -> {
      return this.serializeFeature(it, element);
    };
    String _join = IterableExtensions.join(ListExtensions.<EStructuralFeature, String>map(element.eClass().getEAllStructuralFeatures(), _function), ",\n");
    _builder.append(_join, "    ");
    _builder.newLineIfNotEmpty();
    _builder.append("}");
    _builder.newLine();
    return _builder.toString();
  }

  public String serializeFeature(final EStructuralFeature feature, final EObject element) {
    String _xblockexpression = null;
    {
      final Object value = element.eGet(feature);
      StringConcatenation _builder = new StringConcatenation();
      _builder.append("\"");
      String _name = feature.getName();
      _builder.append(_name);
      _builder.append("\": ");
      String _serializeValue = this.serializeValue(value);
      _builder.append(_serializeValue);
      _builder.newLineIfNotEmpty();
      _xblockexpression = _builder.toString();
    }
    return _xblockexpression;
  }

  public String serializeValue(final Object value) {
    if (((value instanceof String) || (value instanceof Enum))) {
      return (("\"" + value) + "\"");
    } else {
      if ((value instanceof Boolean)) {
        return ((Boolean)value).toString();
      } else {
        if ((value instanceof Collection<?>)) {
          final Function1<Object, String> _function = (Object it) -> {
            return this.serializeValue(it);
          };
          String _join = IterableExtensions.join(IterableExtensions.map(((Iterable<?>)value), _function), ", ");
          String _plus = ("[" + _join);
          return (_plus + "]");
        } else {
          if ((value instanceof EObject)) {
            final Function1<EStructuralFeature, String> _function_1 = (EStructuralFeature it) -> {
              return this.serializeFeature(it, ((EObject)value));
            };
            String _join_1 = IterableExtensions.join(ListExtensions.<EStructuralFeature, String>map(((EObject)value).eClass().getEAllStructuralFeatures(), _function_1), ", ");
            String _plus_1 = ("{ " + _join_1);
            return (_plus_1 + " }");
          } else {
            return value.toString();
          }
        }
      }
    }
  }

  public String generatePieceType(final PieceType pieceType) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("{");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("name: \"");
    String _name = pieceType.getName();
    _builder.append(_name, "    ");
    _builder.append("\",");
    _builder.newLineIfNotEmpty();
    _builder.append("    ");
    _builder.append("symbol: \"");
    String _symbol = pieceType.getSymbol();
    _builder.append(_symbol, "    ");
    _builder.append("\",");
    _builder.newLineIfNotEmpty();
    _builder.append("    ");
    _builder.append("validmoves: [");
    _builder.newLine();
    _builder.append("        ");
    final Function1<ValidMove, String> _function = (ValidMove it) -> {
      return this.generateValidMove(it);
    };
    String _join = IterableExtensions.join(ListExtensions.<ValidMove, String>map(pieceType.getValidmoves(), _function), ",\n");
    _builder.append(_join, "        ");
    _builder.newLineIfNotEmpty();
    _builder.append("    ");
    _builder.append("]");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    return _builder.toString();
  }

  public String generateValidMove(final ValidMove validMove) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("{");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("placeAnywhere: ");
    boolean _isPlaceAnywhere = validMove.isPlaceAnywhere();
    _builder.append(_isPlaceAnywhere, "    ");
    _builder.append(",");
    _builder.newLineIfNotEmpty();
    _builder.append("    ");
    _builder.append("conditions: [");
    _builder.newLine();
    _builder.append("        ");
    final Function1<Condition, String> _function = (Condition it) -> {
      return this.generateCondition(it);
    };
    String _join = IterableExtensions.join(ListExtensions.<Condition, String>map(validMove.getConditions(), _function), ",\n");
    _builder.append(_join, "        ");
    _builder.newLineIfNotEmpty();
    _builder.append("    ");
    _builder.append("]");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    return _builder.toString();
  }

  public String generateCondition(final Condition condition) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("{");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("cellstate: \"");
    String _name = condition.getCellstate().getName();
    _builder.append(_name, "    ");
    _builder.append("\"");
    _builder.newLineIfNotEmpty();
    _builder.append("}");
    _builder.newLine();
    return _builder.toString();
  }

  public String generateWinCondition(final WinCondition winCondition) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("{");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("inarow: {");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("diagonal: ");
    boolean _isDiagonal = winCondition.getInarow().isDiagonal();
    _builder.append(_isDiagonal, "        ");
    _builder.append(",");
    _builder.newLineIfNotEmpty();
    _builder.append("        ");
    _builder.append("horizontal: ");
    boolean _isHorizontal = winCondition.getInarow().isHorizontal();
    _builder.append(_isHorizontal, "        ");
    _builder.append(",");
    _builder.newLineIfNotEmpty();
    _builder.append("        ");
    _builder.append("vertical: ");
    boolean _isVertical = winCondition.getInarow().isVertical();
    _builder.append(_isVertical, "        ");
    _builder.append(",");
    _builder.newLineIfNotEmpty();
    _builder.append("        ");
    _builder.append("count: ");
    int _count = winCondition.getInarow().getCount();
    _builder.append(_count, "        ");
    _builder.newLineIfNotEmpty();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    return _builder.toString();
  }
}
