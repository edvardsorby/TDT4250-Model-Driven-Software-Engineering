/**
 * generated by Xtext 2.35.0
 */
package no.ntnu.tdt4250.g07.bg.bgdl.generator;

import com.google.common.collect.Iterators;
import no.ntnu.tdt4250.group07.bg.BoardGame;
import no.ntnu.tdt4250.group07.bg.CellState;
import no.ntnu.tdt4250.group07.bg.Condition;
import no.ntnu.tdt4250.group07.bg.PieceType;
import no.ntnu.tdt4250.group07.bg.ValidMove;
import no.ntnu.tdt4250.group07.bg.WinCondition;
import org.eclipse.emf.ecore.resource.Resource;
import org.eclipse.xtend2.lib.StringConcatenation;
import org.eclipse.xtext.generator.AbstractGenerator;
import org.eclipse.xtext.generator.IFileSystemAccess2;
import org.eclipse.xtext.generator.IGeneratorContext;
import org.eclipse.xtext.xbase.lib.Functions.Function1;
import org.eclipse.xtext.xbase.lib.IterableExtensions;
import org.eclipse.xtext.xbase.lib.IteratorExtensions;
import org.eclipse.xtext.xbase.lib.ListExtensions;

/**
 * Generates code from your model files on save.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#code-generation
 */
@SuppressWarnings("all")
public class BoardGameDLGenerator extends AbstractGenerator {
  @Override
  public void doGenerate(final Resource resource, final IFileSystemAccess2 fsa, final IGeneratorContext context) {
    final BoardGame boardGame = IteratorExtensions.<BoardGame>head(Iterators.<BoardGame>filter(resource.getAllContents(), BoardGame.class));
    if ((boardGame != null)) {
      fsa.generateFile("boardGame.js", this.generateJS(boardGame));
    }
  }

  public String generateJS(final BoardGame boardGame) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("const boardGame = {");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("size: ");
    int _size = boardGame.getSize();
    _builder.append(_size, "    ");
    _builder.append(",");
    _builder.newLineIfNotEmpty();
    _builder.append("    ");
    _builder.append("piecetypes: [");
    _builder.newLine();
    _builder.append("        ");
    final Function1<PieceType, String> _function = (PieceType it) -> {
      return this.generatePieceType(it);
    };
    String _join = IterableExtensions.join(ListExtensions.<PieceType, String>map(boardGame.getPiecetypes(), _function), ",\n");
    _builder.append(_join, "        ");
    _builder.newLineIfNotEmpty();
    _builder.append("    ");
    _builder.append("],");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("cellstates: [");
    _builder.newLine();
    _builder.append("        ");
    final Function1<CellState, String> _function_1 = (CellState it) -> {
      return CellState.class.getName();
    };
    String _join_1 = IterableExtensions.join(ListExtensions.<CellState, String>map(boardGame.getCellstates(), _function_1), ", ");
    _builder.append(_join_1, "        ");
    _builder.newLineIfNotEmpty();
    _builder.append("    ");
    _builder.append("],");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("winConditions: [");
    _builder.newLine();
    _builder.append("        ");
    final Function1<WinCondition, String> _function_2 = (WinCondition it) -> {
      return this.generateWinCondition(it);
    };
    String _join_2 = IterableExtensions.join(ListExtensions.<WinCondition, String>map(boardGame.getWinConditions(), _function_2), ",\n");
    _builder.append(_join_2, "        ");
    _builder.newLineIfNotEmpty();
    _builder.append("    ");
    _builder.append("]");
    _builder.newLine();
    _builder.append("};");
    _builder.newLine();
    _builder.newLine();
    _builder.append("export default boardGame;");
    _builder.newLine();
    return _builder.toString();
  }

  public String generatePieceType(final PieceType pieceType) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("{");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("name: \"");
    String _name = pieceType.getName();
    _builder.append(_name, "    ");
    _builder.append("\",");
    _builder.newLineIfNotEmpty();
    _builder.append("    ");
    _builder.append("symbol: \"");
    String _symbol = pieceType.getSymbol();
    _builder.append(_symbol, "    ");
    _builder.append("\",");
    _builder.newLineIfNotEmpty();
    _builder.append("    ");
    _builder.append("validmoves: [");
    _builder.newLine();
    _builder.append("        ");
    final Function1<ValidMove, String> _function = (ValidMove it) -> {
      return this.generateValidMove(it);
    };
    String _join = IterableExtensions.join(ListExtensions.<ValidMove, String>map(pieceType.getValidmoves(), _function), ",\n");
    _builder.append(_join, "        ");
    _builder.newLineIfNotEmpty();
    _builder.append("    ");
    _builder.append("]");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    return _builder.toString();
  }

  public String generateValidMove(final ValidMove validMove) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("{");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("placeAnywhere: ");
    boolean _isPlaceAnywhere = validMove.isPlaceAnywhere();
    _builder.append(_isPlaceAnywhere, "    ");
    _builder.append(",");
    _builder.newLineIfNotEmpty();
    _builder.append("    ");
    _builder.append("conditions: [");
    _builder.newLine();
    _builder.append("        ");
    final Function1<Condition, String> _function = (Condition it) -> {
      return this.generateCondition(it);
    };
    String _join = IterableExtensions.join(ListExtensions.<Condition, String>map(validMove.getConditions(), _function), ",\n");
    _builder.append(_join, "        ");
    _builder.newLineIfNotEmpty();
    _builder.append("    ");
    _builder.append("]");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    return _builder.toString();
  }

  public String generateCondition(final Condition condition) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("{");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("cellstate: \"");
    String _name = condition.getCellstate().getName();
    _builder.append(_name, "    ");
    _builder.append("\"");
    _builder.newLineIfNotEmpty();
    _builder.append("}");
    _builder.newLine();
    return _builder.toString();
  }

  public String generateWinCondition(final WinCondition winCondition) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("{");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("inarow: {");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("diagonal: ");
    boolean _isDiagonal = winCondition.getInarow().isDiagonal();
    _builder.append(_isDiagonal, "        ");
    _builder.append(",");
    _builder.newLineIfNotEmpty();
    _builder.append("        ");
    _builder.append("horizontal: ");
    boolean _isHorizontal = winCondition.getInarow().isHorizontal();
    _builder.append(_isHorizontal, "        ");
    _builder.append(",");
    _builder.newLineIfNotEmpty();
    _builder.append("        ");
    _builder.append("vertical: ");
    boolean _isVertical = winCondition.getInarow().isVertical();
    _builder.append(_isVertical, "        ");
    _builder.append(",");
    _builder.newLineIfNotEmpty();
    _builder.append("        ");
    _builder.append("count: ");
    int _count = winCondition.getInarow().getCount();
    _builder.append(_count, "        ");
    _builder.newLineIfNotEmpty();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    return _builder.toString();
  }
}
