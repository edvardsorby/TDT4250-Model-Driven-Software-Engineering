/**
 * generated by Xtext 2.35.0
 */
package no.ntnu.tdt4250.g07.bg.bgdl.formatting2;

import com.google.inject.Inject;
import java.util.Arrays;
import no.ntnu.tdt4250.g07.bg.BoardGame;
import no.ntnu.tdt4250.g07.bg.BoardGameElement;
import no.ntnu.tdt4250.g07.bg.EffectOnCell;
import no.ntnu.tdt4250.g07.bg.PieceType;
import no.ntnu.tdt4250.g07.bg.ValidMove;
import no.ntnu.tdt4250.g07.bg.bgdl.services.BoardGameDLGrammarAccess;
import org.eclipse.emf.common.util.EList;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.formatting2.AbstractFormatter2;
import org.eclipse.xtext.formatting2.IFormattableDocument;
import org.eclipse.xtext.resource.XtextResource;
import org.eclipse.xtext.xbase.lib.Extension;
import org.eclipse.xtext.xbase.lib.XbaseGenerated;

@SuppressWarnings("all")
public class BoardGameDLFormatter extends AbstractFormatter2 {
  @Inject
  @Extension
  private BoardGameDLGrammarAccess _boardGameDLGrammarAccess;

  protected void _format(final BoardGame boardGame, @Extension final IFormattableDocument document) {
    EList<BoardGameElement> _boardGameElements = boardGame.getBoardGameElements();
    for (final BoardGameElement pieceType : _boardGameElements) {
      document.<BoardGameElement>format(pieceType);
    }
    EList<BoardGameElement> _boardGameElements_1 = boardGame.getBoardGameElements();
    for (final BoardGameElement cellState : _boardGameElements_1) {
      document.<BoardGameElement>format(cellState);
    }
    EList<BoardGameElement> _boardGameElements_2 = boardGame.getBoardGameElements();
    for (final BoardGameElement winCondition : _boardGameElements_2) {
      document.<BoardGameElement>format(winCondition);
    }
  }

  protected void _format(final PieceType pieceType, @Extension final IFormattableDocument document) {
    EList<ValidMove> _validMoves = pieceType.getValidMoves();
    for (final ValidMove validMove : _validMoves) {
      document.<ValidMove>format(validMove);
    }
    EList<EffectOnCell> _effectsoncell = pieceType.getEffectsoncell();
    for (final EffectOnCell effectOnCell : _effectsoncell) {
      document.<EffectOnCell>format(effectOnCell);
    }
  }

  @XbaseGenerated
  public void format(final Object pieceType, final IFormattableDocument document) {
    if (pieceType instanceof XtextResource) {
      _format((XtextResource)pieceType, document);
      return;
    } else if (pieceType instanceof PieceType) {
      _format((PieceType)pieceType, document);
      return;
    } else if (pieceType instanceof BoardGame) {
      _format((BoardGame)pieceType, document);
      return;
    } else if (pieceType instanceof EObject) {
      _format((EObject)pieceType, document);
      return;
    } else if (pieceType == null) {
      _format((Void)null, document);
      return;
    } else if (pieceType != null) {
      _format(pieceType, document);
      return;
    } else {
      throw new IllegalArgumentException("Unhandled parameter types: " +
        Arrays.<Object>asList(pieceType, document).toString());
    }
  }
}
