/**
 * generated by Xtext 2.35.0
 */
package no.ntnu.tdt4250.g07.bg.bgdl.formatting2;

import com.google.inject.Inject;
import java.util.Arrays;
import no.ntnu.tdt4250.g07.bg.bgdl.services.BoardGameDLGrammarAccess;
import no.ntnu.tdt4250.group07.bg.BoardGame;
import no.ntnu.tdt4250.group07.bg.CellState;
import no.ntnu.tdt4250.group07.bg.EffectOnCell;
import no.ntnu.tdt4250.group07.bg.PieceType;
import no.ntnu.tdt4250.group07.bg.ValidMove;
import no.ntnu.tdt4250.group07.bg.WinCondition;
import org.eclipse.emf.common.util.EList;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.formatting2.AbstractFormatter2;
import org.eclipse.xtext.formatting2.IFormattableDocument;
import org.eclipse.xtext.resource.XtextResource;
import org.eclipse.xtext.xbase.lib.Extension;

@SuppressWarnings("all")
public class BoardGameDLFormatter extends AbstractFormatter2 {
  @Inject
  @Extension
  private BoardGameDLGrammarAccess _boardGameDLGrammarAccess;

  protected void _format(final BoardGame boardGame, @Extension final IFormattableDocument document) {
    EList<PieceType> _piecetypes = boardGame.getPiecetypes();
    for (final PieceType pieceType : _piecetypes) {
      document.<PieceType>format(pieceType);
    }
    EList<CellState> _cellstates = boardGame.getCellstates();
    for (final CellState cellState : _cellstates) {
      document.<CellState>format(cellState);
    }
    EList<WinCondition> _winConditions = boardGame.getWinConditions();
    for (final WinCondition winCondition : _winConditions) {
      document.<WinCondition>format(winCondition);
    }
  }

  protected void _format(final PieceType pieceType, @Extension final IFormattableDocument document) {
    EList<ValidMove> _validmoves = pieceType.getValidmoves();
    for (final ValidMove validMove : _validmoves) {
      document.<ValidMove>format(validMove);
    }
    EList<EffectOnCell> _effectsoncell = pieceType.getEffectsoncell();
    for (final EffectOnCell effectOnCell : _effectsoncell) {
      document.<EffectOnCell>format(effectOnCell);
    }
  }

  public void format(final Object boardGame, final IFormattableDocument document) {
    if (boardGame instanceof XtextResource) {
      _format((XtextResource)boardGame, document);
      return;
    } else if (boardGame instanceof BoardGame) {
      _format((BoardGame)boardGame, document);
      return;
    } else if (boardGame instanceof PieceType) {
      _format((PieceType)boardGame, document);
      return;
    } else if (boardGame instanceof EObject) {
      _format((EObject)boardGame, document);
      return;
    } else if (boardGame == null) {
      _format((Void)null, document);
      return;
    } else if (boardGame != null) {
      _format(boardGame, document);
      return;
    } else {
      throw new IllegalArgumentException("Unhandled parameter types: " +
        Arrays.<Object>asList(boardGame, document).toString());
    }
  }
}
