// automatically generated by Xtext
grammar no.ntnu.tdt4250.g07.bg.bgdl.BoardgameDL with org.eclipse.xtext.common.Terminals

import "platform:/resource/no.ntnu.tdt4250.g07.bg/model/bg.ecore"
import "http://www.eclipse.org/emf/2002/Ecore" as ecore

Rules returns Rules:
	'Rules'
		board+=Board
		cells+=Cell*
		;

Board returns Board:
	'Board'
	'{'
		'Name' Name=EString
		'Width' Width=EInt
		'Height' Height=EInt
		'cell' '(' cell+=[Cell|EString] ( "," cell+=[Cell|EString])* ')' 
		('boardstate' '(' boardstate+=[BoardState|EString] ( "," boardstate+=[BoardState|EString])* ')' )?
		'playerbrickset' '{' playerbrickset+=PlayerBrickSet ( "," playerbrickset+=PlayerBrickSet)* '}' 
		'validmove' '{' validmove+=ValidMove ( "," validmove+=ValidMove)* '}' 
	'}';

EString returns ecore::EString:
	STRING | ID;

PlayerBrickSet returns PlayerBrickSet:
	'PlayerBrickSet'
	'{'
		'Name' Name=EString
		'win' '(' win+=[Outcome|EString] ( "," win+=[Outcome|EString])* ')' 
		('draw' draw=[Outcome|EString])?
		'brick' '{' brick+=Brick ( "," brick+=Brick)* '}' 
	'}';

Cell returns Cell: 
	'Cell' name=ID
	'{'
		'Xposition' Xposition=EInt
		'Yposition' Yposition=EInt
		'celltype' celltype=[CellType|EString]
	'}';

EInt returns ecore::EInt:
	'-'? INT;

BoardState returns BoardState:
	Toggleable?='Toggleable'
	'BoardState'
	'{'
		'Name' Name=EString
	'}';

ValidMove returns ValidMove:
	'ValidMove'
	'{'
		'Name' Name=EString
		('brickchange' '(' brickchange+=[BrickChange|EString] ( "," brickchange+=[BrickChange|EString])* ')' )?
		('cellchange' '(' cellchange+=[CellChange|EString] ( "," cellchange+=[CellChange|EString])* ')' )?
	'}';

Brick returns Brick:
	'Brick'
	'{'
		'bricktype' bricktype=[BrickType|EString]
		('startCell' startCell=[Cell|EString])?
	'}';

Outcome returns Outcome:
	'Outcome'
	'{'
		'Name' Name=EString
		'condition' '(' condition+=[Condition|EString] ( "," condition+=[Condition|EString])* ')' 
	'}';

BrickType returns BrickType:
	'BrickType'
	'{'
		'Name' Name=EString
		'brickstate' '(' brickstate+=[BrickState|EString] ( "," brickstate+=[BrickState|EString])* ')' 
		('effectoncell' '(' effectoncell+=[EffectOnCell|EString] ( "," effectoncell+=[EffectOnCell|EString])* ')' )?
	'}';

BrickState returns BrickState:
	'BrickState'
	'{'
		'Name' Name=EString
	'}';

EffectOnCell returns EffectOnCell:
	'EffectOnCell'
	'{'
		'Name' Name=EString
		'relativeposition' '(' relativeposition+=[RelativePosition|EString] ( "," relativeposition+=[RelativePosition|EString])* ')' 
		'cellstate' cellstate=[CellState|EString]
	'}';

RelativePosition returns RelativePosition:
	'RelativePosition'
	'{'
		'Xchange' Xchange=EInt
		'Ychange' Ychange=EInt
	'}';

CellState returns CellState:
	'CellState'
	'{'
		'Name' Name=EString
	'}';

Condition returns Condition:
	mandatory?='mandatory'
	prohibited?='prohibited'
	'Condition'
	'{'
		'Name' Name=EString
		('boardstate' '(' boardstate+=[BoardState|EString] ( "," boardstate+=[BoardState|EString])* ')' )?
		('relativeposition' relativeposition=[RelativePosition|EString])?
		('bricktype' bricktype=[BrickType|EString])?
		('brickstate' brickstate=[BrickState|EString])?
		('celltype' celltype=[CellType|EString])?
		('cellstate' cellstate=[CellState|EString])?
		('line' '(' line+=[Line|EString] ( "," line+=[Line|EString])* ')' )?
	'}';

EBoolean returns ecore::EBoolean:
	'true' | 'false';

CellType returns CellType:
	'CellType'
	'{'
		'Name' Name=EString
		'cellstate' '(' cellstate+=[CellState|EString] ( "," cellstate+=[CellState|EString])* ')' 
	'}';

Line returns Line:
	Horizontal?='Horizontal'
	Vertical?='Vertical'
	Diagonal?='Diagonal'
	'Line'
	'{'
		'lineelement' '{' lineelement+=LineElement ( "," lineelement+=LineElement)* '}' 
	'}';

LineElement returns LineElement:
	{LineElement}
	'LineElement'
	'{'
		('Position' Position=EInt)?
		('celltype' celltype=[CellType|EString])?
		('cellstate' cellstate=[CellState|EString])?
		('brickstate' brickstate=[BrickState|EString])?
		('bricktype' bricktype=[BrickType|EString])?
	'}';

BrickChange returns BrickChange:
	'BrickChange'
	'{'
		'Name' Name=EString
		('positionchange' positionchange=[RelativePosition|EString])?
		('movingBrick' movingBrick=[BrickType|EString])?
		('changeFrom' changeFrom=[BrickType|EString])?
		('changeTo' changeTo=[BrickType|EString])?
		('condition' '(' condition+=[Condition|EString] ( "," condition+=[Condition|EString])* ')' )?
	'}';

CellChange returns CellChange:
	'CellChange'
	'{'
		'Name' Name=EString
		('condition' '(' condition+=[Condition|EString] ( "," condition+=[Condition|EString])* ')' )?
		'changeFrom' changeFrom=[CellType|EString]
		'changeTo' changeTo=[CellType|EString]
	'}';
